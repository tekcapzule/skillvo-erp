// ========================================
// Main Mixins
// ========================================
// Single source of truth for all core mixins
// Theme and accessibility mixins are in their respective files

// Import specialized mixin files for use within this file
@use 'a11y-mixins' as a11y;
@use 'theme-mixins' as theme;

// Forward them to make them available when importing this file
@forward 'a11y-mixins';
@forward 'theme-mixins';

// ========================================
// Media Queries / Breakpoints
// ========================================
// Use breakpoint mixins from _breakpoints.scss

// Legacy breakpoint mixin - redirects to the new system
@mixin breakpoint($breakpoint) {
  @include breakpoint-up($breakpoint) {
    @content;
  }
}

// ========================================
// Layout Helpers
// ========================================

// Clear floats
@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Truncate text with ellipsis
@mixin truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Multi-line truncation
@mixin truncate-multiline($lines: 2) {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  overflow: hidden;
}

// Flexbox shortcuts
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Center content both vertically and horizontally
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Grid layout shortcut
@mixin grid($columns: 1, $gap: var(--space-4)) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Create a square container
@mixin square($size) {
  width: $size;
  height: $size;
}

// Set aspect ratio for responsive elements
@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// ========================================
// UI Helpers
// ========================================

// Box shadow levels
@mixin shadow($level: md) {
  @if $level == sm {
    box-shadow: var(--shadow-sm);
  } @else if $level == md {
    box-shadow: var(--shadow-md);
  } @else if $level == lg {
    box-shadow: var(--shadow-lg);
  } @else if $level == xl {
    box-shadow: var(--shadow-xl);
  } @else if $level == 2xl {
    box-shadow: var(--shadow-2xl);
  } @else if $level == inner {
    box-shadow: var(--shadow-inner);
  }
}

// Standard transition with safety for reduced motion
@mixin transition($property: all, $duration: var(--base-transition-duration), $timing: var(--base-transition-timing), $delay: 0s) {
  transition: $property $duration $timing $delay;
  
  @include a11y.reduced-motion {
    transition-duration: 0.01ms;
  }
}

// Hardware acceleration for animations
@mixin hardware-accelerate() {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000px;
}

// Hide scrollbars while allowing scrolling
@mixin no-scrollbar {
  -ms-overflow-style: none;  // IE and Edge
  scrollbar-width: none;     // Firefox
  
  &::-webkit-scrollbar {
    display: none;           // Chrome, Safari and Opera
  }
}

// ========================================
// Form Element Helpers
// ========================================

// Reset form element styles
@mixin form-reset() {
  appearance: none;
  background-color: transparent;
  border: none;
  padding: 0;
  margin: 0;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

// Button styles
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--btn-padding-y) var(--btn-padding-x);
  font-weight: 500;
  border-radius: var(--radius-md);
  text-align: center;
  cursor: pointer;
  @include transition(
    background-color,
    color,
    border-color,
    box-shadow
  );
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

// ========================================
// Text Helpers
// ========================================

// Gradient text
@mixin text-gradient($gradient) {
  background-image: $gradient;
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
}

// Responsive font size with clamp
@mixin responsive-font-size($min-size, $max-size, $min-width: 320px, $max-width: 1200px) {
  font-size: $min-size;
  
  @media (min-width: $min-width) {
    font-size: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-width}) / #{strip-unit($max-width - $min-width)}));
  }
  
  @media (min-width: $max-width) {
    font-size: $max-size;
  }
}

// Strip unit from a value (helper function)
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// ========================================
// Container Helpers
// ========================================

// Container with maximum width and centered
@mixin container($max-width: 1200px, $padding: var(--space-4)) {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: $padding;
  padding-right: $padding;
}

// Responsive container based on breakpoints
@mixin responsive-container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: var(--space-4);
  padding-left: var(--space-4);
  
  @include breakpoint-up(sm) {
    max-width: var(--container-sm);
  }
  
  @include breakpoint-up(md) {
    max-width: var(--container-md);
  }
  
  @include breakpoint-up(lg) {
    max-width: var(--container-lg);
  }
  
  @include breakpoint-up(xl) {
    max-width: var(--container-xl);
  }
  
  @include breakpoint-up(xxl) {
    max-width: var(--container-xxl);
  }
}

// ========================================
// Animation Helpers
// ========================================

// Keyframe animation mixin
@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}

// Apply animation with reduced motion support
@mixin animate($name, $duration: 1s, $timing: ease, $delay: 0s, $iteration-count: 1, $direction: normal, $fill-mode: none) {
  animation: $name $duration $timing $delay $iteration-count $direction $fill-mode;
  
  @include a11y.reduced-motion {
    animation-duration: 0.01ms;
    animation-iteration-count: 1;
  }
}

// Fade-in animation
@mixin fade-in($duration: 0.3s, $delay: 0s) {
  opacity: 0;
  @include animate(fadeIn, $duration, ease-in, $delay, 1, normal, forwards);
}

@include keyframes(fadeIn) {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

// Slide-in animation variants
@mixin slide-in-up($duration: 0.3s, $delay: 0s, $distance: 20px) {
  transform: translateY($distance);
  opacity: 0;
  @include animate(slideInUp, $duration, ease-out, $delay, 1, normal, forwards);
}

@include keyframes(slideInUp) {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

// ========================================
// Responsive Helpers
// ========================================

// Hide element only on specified breakpoint
@mixin hide-on($breakpoint) {
  @include breakpoint-up($breakpoint) {
    display: none;
  }
}

// Show element only on specified breakpoint
@mixin show-on($breakpoint) {
  display: none;
  @include breakpoint-up($breakpoint) {
    display: block;
  }
}

// Apply styles only on mobile devices
@mixin mobile-only {
  @media (max-width: (map-get($breakpoints, sm) - 1px)) {
    @content;
  }
}

// Apply styles only on tablet devices
@mixin tablet-only {
  @media (min-width: map-get($breakpoints, sm)) and (max-width: (map-get($breakpoints, lg) - 1px)) {
    @content;
  }
}

// Apply styles only on desktop devices
@mixin desktop-only {
  @media (min-width: map-get($breakpoints, lg)) {
    @content;
  }
}

// ========================================
// Component Patterns
// ========================================

// Card component base styles
@mixin card-base {
  background-color: var(--bg-surface);
  border-radius: var(--radius-lg);
  overflow: hidden;
  @include shadow(sm);
  @include theme.default-theme-transition;
  
  @include theme.dark-mode {
    background-color: var(--bg-surface-dark);
  }
}

// Input field base styles
@mixin input-base {
  display: block;
  width: 100%;
  padding: var(--space-2) var(--space-3);
  font-size: var(--text-base);
  line-height: var(--leading-normal);
  border: 1px solid var(--border-input);
  border-radius: var(--radius-md);
  background-color: var(--bg-input);
  color: var(--text-primary);
  @include transition(border-color, box-shadow);
  
  &:focus {
    outline: none;
    border-color: var(--border-focus);
    box-shadow: 0 0 0 3px var(--border-focus-ring);
  }
  
  &::placeholder {
    color: var(--text-placeholder);
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background-color: var(--bg-disabled);
  }
  
  @include theme.dark-mode {
    background-color: var(--bg-input-dark);
    color: var(--text-primary-dark);
    border-color: var(--border-input-dark);
    
    &::placeholder {
      color: var(--text-placeholder-dark);
    }
    
    &:disabled {
      background-color: var(--bg-disabled-dark);
    }
  }
}

// ========================================
// RTL Support
// ========================================

// Apply styles for RTL (right-to-left) layouts
@mixin rtl {
  [dir="rtl"] & {
    @content;
  }
}

// Flip an element horizontally for RTL support
@mixin flip-for-rtl {
  [dir="rtl"] & {
    transform: scaleX(-1);
  }
}

// ========================================
// Border and Border Radius
// ========================================

// Apply border radius to an element
@mixin rounded($size: md) {
  @if $size == sm {
    border-radius: var(--radius-sm);
  } @else if $size == md {
    border-radius: var(--radius-md);
  } @else if $size == lg {
    border-radius: var(--radius-lg);
  } @else if $size == xl {
    border-radius: var(--radius-xl);
  } @else if $size == '2xl' {
    border-radius: var(--radius-2xl);
  } @else if $size == '3xl' {
    border-radius: var(--radius-3xl);
  } @else if $size == full {
    border-radius: var(--radius-full);
  } @else if $size == none {
    border-radius: var(--radius-none);
  }
} 