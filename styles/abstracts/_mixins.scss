// ========================================
// SkillVo Essential Mixins
// ========================================

// === Theme Mixins=== 
@use 'sass:map';

// Mixin to generate CSS custom properties for a given theme map
@mixin generate-theme-vars($theme-map) {
  @each $name, $value in $theme-map {
    --#{$name}: #{$value};
  }
}

@mixin generate-theme-utility-classes($theme-map) {
  @each $name, $color in $theme-map {
    .text-#{$name} {
      color: var(--#{$name}) !important;
    }
    .bg-#{$name} {
      background-color: var(--#{$name}) !important;
    }
    .border-#{$name} {
      border-color: var(--#{$name}) !important;
    }
  }
}

// === Theme Transition Mixin ===
@mixin theme-transition($properties...) {
    transition: $properties 0.3s ease-in-out;
  }
  
  // === Accessibility Mixins ===
  
  // Visually hide elements while keeping them accessible to screen readers
  @mixin visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  // Content only visible to screen readers but becomes visible on focus
  @mixin sr-only-focusable {
    @include visually-hidden;
    
    &:focus,
    &:active {
      position: static;
      width: auto;
      height: auto;
      overflow: visible;
      clip: auto;
      white-space: normal;
    }
  }
  
  
// ========================================
// Breakpoint Mixins
// ========================================

// Min-width breakpoint (from this size and up)
@mixin breakpoint-up($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint `#{$breakpoint}`. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Max-width breakpoint (from this size and down)
@mixin breakpoint-down($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (max-width: map.get($breakpoints, $breakpoint) - 0.02px) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint `#{$breakpoint}`. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Between two breakpoints (inclusive)
@mixin breakpoint-between($lower, $upper) {
  @if map.has-key($breakpoints, $lower) and map.has-key($breakpoints, $upper) {
    @media (min-width: map.get($breakpoints, $lower)) and (max-width: map.get($breakpoints, $upper) - 0.02px) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint `#{$lower}` or `#{$upper}`. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Only at a specific breakpoint
@mixin breakpoint-only($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $lower: map.get($breakpoints, $breakpoint);
    $upper: if(
      map.has-key($breakpoints, breakpoint-next($breakpoint)),
      map.get($breakpoints, breakpoint-next($breakpoint)),
      null
    );
    
    @if $upper {
      @media (min-width: $lower) and (max-width: $upper - 0.02px) {
        @content;
      }
    } @else {
      @media (min-width: $lower) {
        @content;
      }
    }
  } @else {
    @error "Unknown breakpoint `#{$breakpoint}`. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Get the next breakpoint name
@function breakpoint-next($breakpoint) {
  $breakpoint-list: map.keys($breakpoints);
  $index: index($breakpoint-list, $breakpoint);

  @if $index and $index < length($breakpoint-list) {
    @return nth($breakpoint-list, $index + 1);
  } @else {
    @return null;
  }
}
