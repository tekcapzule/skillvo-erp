@use 'sass:map';
@use 'sass:list';

// ========================================
// Theme Mixins
// ========================================
// Specialized mixins for implementing theme functionality
// These mixins help create consistent theme switching and mode-specific styling

// Apply styles only in dark mode
@mixin dark-mode {
  html[data-theme="dark"] &,
  .dark-theme & {
    @content;
  }
}

// Apply styles only in light mode
@mixin light-mode {
  :root:not([data-theme="dark"]) &,
  html[data-theme="light"] &,
  .light-theme & {
    @content;
  }
}

// Apply styles only in ocean theme
@mixin ocean-theme {
  html[data-theme="ocean"] &,
  .ocean-theme & {
    @content;
  }
}

// Apply styles only in classic theme
@mixin classic-theme {
  html[data-theme="classic"] &,
  .classic-theme & {
    @content;
  }
}

// Apply theme-specific styles to a property
@mixin themed($property, $light-value, $dark-value) {
  #{$property}: $light-value;
  
  @include dark-mode {
    #{$property}: $dark-value;
  }
}

// Apply theme-specific styles with four possible themes
@mixin themed-complete($property, $light-value, $dark-value, $ocean-value: null, $classic-value: null) {
  #{$property}: $light-value;
  
  @include dark-mode {
    #{$property}: $dark-value;
  }
  
  @if $ocean-value {
    @include ocean-theme {
      #{$property}: $ocean-value;
    }
  }
  
  @if $classic-value {
    @include classic-theme {
      #{$property}: $classic-value;
    }
  }
}

// Generates theme color variations for hover/focus states
@mixin theme-interactive-color($base-color, $hover-color, $active-color, $dark-base: null, $dark-hover: null, $dark-active: null) {
  color: $base-color;
  
  &:hover, &:focus {
    color: $hover-color;
  }
  
  &:active {
    color: $active-color;
  }
  
  @if $dark-base {
    @include dark-mode {
      color: $dark-base;
      
      &:hover, &:focus {
        color: if($dark-hover, $dark-hover, lighten($dark-base, 10%));
      }
      
      &:active {
        color: if($dark-active, $dark-active, darken($dark-base, 10%));
      }
    }
  }
}

// Generates theme background variations for hover/focus states
@mixin theme-interactive-bg($base-bg, $hover-bg, $active-bg, $dark-base: null, $dark-hover: null, $dark-active: null) {
  background-color: $base-bg;
  
  &:hover, &:focus {
    background-color: $hover-bg;
  }
  
  &:active {
    background-color: $active-bg;
  }
  
  @if $dark-base {
    @include dark-mode {
      background-color: $dark-base;
      
      &:hover, &:focus {
        background-color: if($dark-hover, $dark-hover, lighten($dark-base, 5%));
      }
      
      &:active {
        background-color: if($dark-active, $dark-active, darken($dark-base, 5%));
      }
    }
  }
}

// Create a smooth transition between themes
/// @desc Applies transition properties for smooth theme switching
/// @param {List|String} $properties - List of properties to transition or multiple properties as separate arguments
/// @param {Number} $duration - Transition duration when passed with a properties list
@mixin theme-transition($properties...) {
  $transition-list: ();
  $duration: 200ms;
  
  // If first argument is a list and second is a number, use them as properties and duration
  @if list.length($properties) == 2 and type-of(nth($properties, 2)) == "number" {
    $prop-list: nth($properties, 1);
    $duration: nth($properties, 2);
    
    @each $property in $prop-list {
      $transition-list: list.append($transition-list, $property $duration ease-in-out, comma);
    }
  }
  // If we have multiple string arguments, treat each as a property
  @else if list.length($properties) > 0 {
    @each $property in $properties {
      $transition-list: list.append($transition-list, $property $duration ease-in-out, comma);
    }
  }
  // Default case - use standard transitions
  @else {
    $default-properties: (color, background-color, border-color, box-shadow);
    @each $property in $default-properties {
      $transition-list: list.append($transition-list, $property $duration ease-in-out, comma);
    }
  }
  
  transition: $transition-list;
}

// Default theme transition for common properties
@mixin default-theme-transition {
  @include theme-transition(
    color,
    background-color,
    border-color,
    box-shadow
  );
}

// Smart component theming
@mixin component-theme($light-bg: var(--bg-surface), $light-text: var(--text-primary), $dark-bg: var(--bg-surface-dark), $dark-text: var(--text-primary-dark)) {
  background-color: $light-bg;
  color: $light-text;
  @include default-theme-transition;
  
  @include dark-mode {
    background-color: $dark-bg;
    color: $dark-text;
  }
}

// Media query for detecting user theme preference
@mixin prefers-theme($theme: dark) {
  @if $theme == dark {
    @media (prefers-color-scheme: dark) {
      @content;
    }
  } @else if $theme == light {
    @media (prefers-color-scheme: light) {
      @content;
    }
  }
}

// ========================================
// Theme Variable Generation
// ========================================

/**
 * Generate CSS custom properties from a theme map
 * @param {Map} $map - The theme map containing variable names and values
 * @param {String} $prefix - Optional prefix for variable names
 */
@mixin generate-theme-vars($map, $prefix: null) {
  // CSS custom properties must be inside a selector block
  // The mixin caller is responsible for being inside a selector
  @each $key, $value in $map {
    @if $prefix {
      --#{$prefix}-#{$key}: #{$value};
    } @else {
      --#{$key}: #{$value};
    }
  }
  
  @content;
}

// ========================================
// Theme System Mixins
// ========================================

/// Media query for dark mode preference
/// @content styles to apply when dark mode is preferred
@mixin prefer-dark-mode {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}

/// Creates a container with a colored background and appropriate text color
/// @param {String} $bg-color - The background color variable
/// @param {String} $text-color - The text color variable (optional)
@mixin themed-container($bg-color, $text-color: null) {
  background-color: var($bg-color);
  
  @if $text-color {
    color: var($text-color);
  } @else {
    @if str-index($bg-color, 'primary') or str-index($bg-color, 'secondary') or str-index($bg-color, 'tertiary') {
      color: var(--text-on-dark);
    } @else {
      color: var(--text-primary);
    }
  }
}

// Helper mixin for applying color scheme based on theme
@mixin color-scheme-aware {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme="light"]) {
      @content;
    }
  }
}

// ========================================
// Theme Generation Mixins
// ========================================

/// Generates component-specific theme variables from a component map
/// @param {Map} $component-map - Map containing component variables
@mixin generate-component-vars($component-map) {
  @each $property, $value in $component-map {
    --#{$property}: #{$value};
  }
}

/// Generates utility classes for theme colors
/// @param {Map} $colors-map - Map of color variables to generate classes for
@mixin generate-color-utilities($colors-map) {
  @each $name, $value in $colors-map {
    // Background color utilities
    .bg-#{$name} {
      background-color: #{$value};
    }
    
    // Text color utilities
    .text-#{$name} {
      color: #{$value};
    }
    
    // Border color utilities
    .border-#{$name} {
      border-color: #{$value};
    }
  }
}

/// Apply specific theme variables based on the theme
/// @param {String} $theme - Name of the theme ('light' or 'dark')
/// @param {Map} $theme-map - Map containing theme variables
/// @param {Map} $component-map - Map containing component-specific variables
@mixin apply-theme($theme, $theme-map, $component-map) {
  .theme-#{$theme} {
    @include generate-theme-vars($theme-map);
    @include generate-component-vars($component-map);
  }
}

// ========================================
// Theme Utility Classes Generation
// ========================================

/**
 * Generate utility classes for theme colors
 * @param {Map} $theme-colors - Map of color names and their values
 */
@mixin generate-theme-utility-classes($theme-colors) {
  @each $color-name, $color-map in $theme-colors {
    .bg-#{$color-name} {
      background-color: var(--#{$color-name});
      color: var(--text-on-#{$color-name}, var(--text-on-dark));
    }
    
    .text-#{$color-name} {
      color: var(--#{$color-name});
    }
    
    .border-#{$color-name} {
      border-color: var(--#{$color-name});
    }
  }
} 