// ========================================
// Breakpoint Variables
// ========================================
// Single source of truth for all responsive breakpoints
// Used for consistent media queries across the application

@use 'sass:map';

// Breakpoint Scale (in pixels)
// ----------------------------------------
// Standard bootstrap-style breakpoints with additional xxl point
$breakpoint-xs: 0 !default;       // Extra small screens, mobile portrait
$breakpoint-sm: 576px !default;   // Small screens, mobile landscape
$breakpoint-md: 768px !default;   // Medium screens, tablets
$breakpoint-lg: 992px !default;   // Large screens, desktops
$breakpoint-xl: 1200px !default;  // Extra large screens, large desktops
$breakpoint-xxl: 1400px !default; // Extra extra large screens

// Breakpoints Map
// ----------------------------------------
// For use with the breakpoint mixins
$breakpoints: (
  'xs': $breakpoint-xs,
  'sm': $breakpoint-sm,
  'md': $breakpoint-md,
  'lg': $breakpoint-lg,
  'xl': $breakpoint-xl,
  'xxl': $breakpoint-xxl
) !default;

// Container Max Widths (for layout containers)
// ----------------------------------------
$container-max-widths: (
  'sm': 540px,
  'md': 720px,
  'lg': 960px,
  'xl': 1140px,
  'xxl': 1320px
) !default;

// Define CSS Custom Properties
// ----------------------------------------
// These will be available for use across the app
:root {
  // Breakpoints
  --breakpoint-xs: #{$breakpoint-xs};
  --breakpoint-sm: #{$breakpoint-sm};
  --breakpoint-md: #{$breakpoint-md};
  --breakpoint-lg: #{$breakpoint-lg};
  --breakpoint-xl: #{$breakpoint-xl};
  --breakpoint-xxl: #{$breakpoint-xxl};

  // Container max widths
  --container-sm: #{map.get($container-max-widths, 'sm')};
  --container-md: #{map.get($container-max-widths, 'md')};
  --container-lg: #{map.get($container-max-widths, 'lg')};
  --container-xl: #{map.get($container-max-widths, 'xl')};
  --container-xxl: #{map.get($container-max-widths, 'xxl')};
}

// ========================================
// Breakpoint Mixins
// ========================================

// Min-width breakpoint (from this size and up)
@mixin breakpoint-up($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint `#{$breakpoint}`. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Max-width breakpoint (from this size and down)
@mixin breakpoint-down($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (max-width: map.get($breakpoints, $breakpoint) - 0.02px) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint `#{$breakpoint}`. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Between two breakpoints (inclusive)
@mixin breakpoint-between($lower, $upper) {
  @if map.has-key($breakpoints, $lower) and map.has-key($breakpoints, $upper) {
    @media (min-width: map.get($breakpoints, $lower)) and (max-width: map.get($breakpoints, $upper) - 0.02px) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint `#{$lower}` or `#{$upper}`. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Only at a specific breakpoint
@mixin breakpoint-only($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $lower: map.get($breakpoints, $breakpoint);
    $upper: if(
      map.has-key($breakpoints, breakpoint-next($breakpoint)),
      map.get($breakpoints, breakpoint-next($breakpoint)),
      null
    );
    
    @if $upper {
      @media (min-width: $lower) and (max-width: $upper - 0.02px) {
        @content;
      }
    } @else {
      @media (min-width: $lower) {
        @content;
      }
    }
  } @else {
    @error "Unknown breakpoint `#{$breakpoint}`. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Get the next breakpoint name
@function breakpoint-next($breakpoint) {
  $breakpoint-list: map.keys($breakpoints);
  $index: index($breakpoint-list, $breakpoint);

  @if $index and $index < length($breakpoint-list) {
    @return nth($breakpoint-list, $index + 1);
  } @else {
    @return null;
  }
}
