/**
 * Number Input Component - Component-level Styles
 * Version: 2.1.0
 * Last Updated: July 15, 2024
 * 
 * This file defines styles for the Number Input component in the SkillVo design system.
 * It extends the input-control-base class and provides number input-specific styling.
 */

/* ==========================================================================
   TABLE OF CONTENTS:
   
   1. IMPORTS & VARIABLES
   2. NUMBER INPUT BASE
   3. STEPPER CONTROLS
   4. NUMBER INPUT VARIATIONS
   5. COMPONENT-SPECIFIC STATES
   6. RESPONSIVE ADJUSTMENTS
   ========================================================================== */

/* ==========================================================================
   1. IMPORTS & VARIABLES
   ========================================================================== */
@use './../../abstracts' as *;
@use './../../base/utils/mixins/state' as state;
@use './../../base/utils/mixins/layout' as layout;
@use './../../base/utils/mixins/responsive' as responsive;
@use './../../base/utils/mixins/accessibility' as a11y;

// Component-specific variables
$number-input-max-width: var(--sv-size-40);
$number-input-transition-duration: var(--sv-motion-duration-short);
$number-input-transition-timing: var(--sv-motion-ease-standard);
$number-input-stepper-width: var(--sv-size-8);
$number-input-stepper-bg: var(--sv-bg-element);
$number-input-stepper-hover-bg: var(--sv-bg-element-hover);
$number-input-stepper-active-bg: var(--sv-bg-element-active);
$number-input-stepper-border-color: var(--sv-border-light);
$number-input-stepper-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);
$number-input-stepper-icon-size: var(--sv-size-4);

/* ==========================================================================
   2. NUMBER INPUT BASE
   ========================================================================== */

.sv-number-input {
  // Extend the input control base styles
  @extend .sv-input-control-base !optional;
  
  // Unique properties for number input field
  position: relative;
  max-width: $number-input-max-width;
  
  // Add consistent transitions
  transition: border-color $number-input-transition-duration $number-input-transition-timing,
              box-shadow $number-input-transition-duration $number-input-transition-timing,
              background-color $number-input-transition-duration $number-input-transition-timing;
  
  // BEM-style elements
  &__wrapper {
    display: flex;
    flex-direction: column;
    width: 100%;
  }
  
  &__input {
    @extend .sv-input-control-base__field !optional;
    -moz-appearance: textfield; // Remove Firefox spinners
    text-align: center;
    
    // Remove browser spinners
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }
  
  &__label {
    @extend .sv-input-control-base__label !optional;
  }
  
  &__helper-text {
    @extend .sv-input-control-base__helper-text !optional;
  }
  
  // Enhanced focus behavior
  &:focus-within {
    border-color: var(--sv-primary);
    box-shadow: var(--sv-shadow-focus);
  }
}

/* ==========================================================================
   3. STEPPER CONTROLS
   ========================================================================== */

.sv-number-input {
  // Default style with steppers on right side
  &--with-steppers {
    padding-right: $number-input-stepper-width;
  }
  
  // Stepper controls container
  &__steppers {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: $number-input-stepper-width;
    display: flex;
    flex-direction: column;
    border-left: 1px solid $number-input-stepper-border-color;
    
    // Individual stepper buttons
    .sv-number-input__stepper {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: $number-input-stepper-bg;
      border: none;
      padding: 0;
      margin: 0;
      cursor: pointer;
      box-shadow: $number-input-stepper-shadow;
      color: var(--sv-text-secondary);
      
      &:hover:not(:disabled) {
        background-color: $number-input-stepper-hover-bg;
        color: var(--sv-text-primary);
      }
      
      &:active:not(:disabled) {
        background-color: $number-input-stepper-active-bg;
      }
      
      &:focus {
        outline: none;
      }
      
      &:focus-visible {
        outline: var(--sv-focus-ring-width) solid var(--sv-focus-ring-color);
        outline-offset: -1px;
      }
      
      &:disabled {
        cursor: not-allowed;
        opacity: 0.5;
      }
      
      // Increment button (top)
      &--increment {
        border-bottom: 1px solid $number-input-stepper-border-color;
        border-top-right-radius: var(--sv-radius-md);
      }
      
      // Decrement button (bottom)
      &--decrement {
        border-bottom-right-radius: var(--sv-radius-md);
      }
      
      // Stepper icons
      &-icon {
        width: $number-input-stepper-icon-size;
        height: $number-input-stepper-icon-size;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    }
  }
  
  // Horizontal steppers layout (steppers on both sides)
  &--horizontal-steppers {
    padding-left: $number-input-stepper-width;
    padding-right: $number-input-stepper-width;
    
    .sv-number-input__steppers {
      flex-direction: row;
      width: 100%;
      height: 100%;
      border-left: none;
      
      .sv-number-input__stepper {
        width: $number-input-stepper-width;
        height: 100%;
        
        &--increment {
          position: absolute;
          right: 0;
          top: 0;
          bottom: 0;
          border-top-right-radius: var(--sv-radius-md);
          border-bottom-right-radius: var(--sv-radius-md);
          border-bottom: none;
          border-left: 1px solid $number-input-stepper-border-color;
        }
        
        &--decrement {
          position: absolute;
          left: 0;
          top: 0;
          bottom: 0;
          border-top-left-radius: var(--sv-radius-md);
          border-bottom-left-radius: var(--sv-radius-md);
          border-right: 1px solid $number-input-stepper-border-color;
        }
      }
    }
  }
}

/* ==========================================================================
   4. NUMBER INPUT VARIATIONS
   ========================================================================== */

.sv-number-input {
  // Compact variation
  &--compact {
    height: var(--sv-control-height-sm);
    font-size: var(--sv-font-size-sm);
    
    .sv-number-input__stepper-icon {
      width: calc($number-input-stepper-icon-size * 0.75);
      height: calc($number-input-stepper-icon-size * 0.75);
    }
  }
  
  // Large variation
  &--large {
    height: var(--sv-control-height-lg);
    font-size: var(--sv-font-size-lg);
    
    .sv-number-input__stepper-icon {
      width: calc($number-input-stepper-icon-size * 1.25);
      height: calc($number-input-stepper-icon-size * 1.25);
    }
  }
  
  // Prefix and suffix variations
  &--with-prefix,
  &--with-suffix {
    display: flex;
    align-items: center;
    
    .sv-number-input__addon {
      display: inline-flex;
      align-items: center;
      padding: 0 var(--sv-space-2);
      background-color: var(--sv-bg-element);
      color: var(--sv-text-secondary);
      font-size: var(--sv-font-size-sm);
      border-radius: 0;
      height: 100%;
    }
    
    &.sv-number-input--with-prefix {
      .sv-number-input__addon {
        border-right: 1px solid $number-input-stepper-border-color;
      }
    }
    
    &.sv-number-input--with-suffix {
      .sv-number-input__addon {
        border-left: 1px solid $number-input-stepper-border-color;
      }
    }
  }
}

/* ==========================================================================
   5. COMPONENT-SPECIFIC STATES
   ========================================================================== */

.sv-number-input {
  // Valid state
  &.is-valid {
    border-color: var(--sv-success);
    
    &:focus-within {
      box-shadow: 0 0 0 var(--sv-focus-ring-width) rgba(var(--sv-success-rgb), 0.25);
    }
    
    .sv-number-input__helper-text {
      color: var(--sv-success);
    }
  }
  
  // Invalid state
  &.is-invalid {
    border-color: var(--sv-error);
    
    &:focus-within {
      box-shadow: 0 0 0 var(--sv-focus-ring-width) rgba(var(--sv-error-rgb), 0.25);
    }
    
    .sv-number-input__helper-text {
      color: var(--sv-error);
    }
  }
  
  // Readonly state
  &.is-readonly,
  &[readonly] {
    background-color: var(--sv-bg-element-disabled);
    border-color: var(--sv-border-light);
    cursor: default;
    
    .sv-number-input__steppers {
      display: none;
    }
    
    &.sv-number-input--with-steppers {
      padding-right: var(--sv-space-3);
    }
    
    &.sv-number-input--horizontal-steppers {
      padding-left: var(--sv-space-3);
      padding-right: var(--sv-space-3);
    }
  }
  
  // Disabled state extensions (beyond base class handling)
  &.is-disabled,
  &:disabled {
    .sv-number-input__stepper {
      background-color: var(--sv-bg-element-disabled);
      cursor: not-allowed;
      opacity: 0.5;
    }
  }
}

/* ==========================================================================
   6. RESPONSIVE ADJUSTMENTS
   ========================================================================== */

@include responsive.breakpoint-down(sm) {
  .sv-number-input {
    font-size: var(--sv-font-size-sm);
    
    // Full width on mobile
    width: 100%;
    max-width: 100%;
    
    // Larger touch targets for steppers on mobile
    &__stepper {
      min-height: calc(var(--sv-tap-target-size) / 2);
    }
  }
}

@include responsive.breakpoint-down(xs) {
  .sv-number-input {
    &--with-prefix,
    &--with-suffix {
      .sv-number-input__addon {
        padding: 0 var(--sv-space-1);
        font-size: var(--sv-font-size-xs);
      }
    }
  }
}