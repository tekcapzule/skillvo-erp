/**
 * Text Field Component
 * Version: 2.0.0
 * Last Updated: April 29, 2025
 * 
 * This file contains styles specific to the text input field component.
 * It extends the sv-input-base class which provides common styling for all input types.
 */

/* ==========================================================================
   TABLE OF CONTENTS:
   
   1. IMPORTS & VARIABLES
   2. TEXT FIELD BASE
   3. TEXT FIELD VARIATIONS
   4. COMPONENT-SPECIFIC STATES
   5. RESPONSIVE ADJUSTMENTS
   ========================================================================== */

/* ==========================================================================
   1. IMPORTS & VARIABLES
   ========================================================================== */
   @use '../mixins' as *;
   @use '../base-control' as *;
   @use '../input-controls' as *;
   
   // Component-specific variables
   $text-field-max-width: var(--sv-size-64);
   $text-field-min-width: var(--sv-size-40);
   
   /* ==========================================================================
      2. TEXT FIELD BASE
      ========================================================================== */
   
   .sv-text-field {
     // Extend the input base styles
     @extend .sv-input-base;
     
     // Unique properties for text input field
     max-width: $text-field-max-width;
     
     // Improve text readability
     font-feature-settings: "kern", "liga", "calt";
     
     // Prefer width control with flex layout
     &-wrapper {
       display: flex;
       flex-direction: column;
       width: 100%;
     }
   }
   
   /* ==========================================================================
      3. TEXT FIELD VARIATIONS
      ========================================================================== */
   
   // Multiline text field
   .sv-text-field-multiline {
     height: auto;
     min-height: calc($input-height * 2);
     resize: vertical;
     overflow-y: auto;
     white-space: pre-wrap;
     line-height: var(--sv-leading-normal);
   }
   
   // Autocomplete text field
   .sv-text-field-autocomplete {
     position: relative;
     
     &-list {
       position: absolute;
       top: 100%;
       left: 0;
       width: 100%;
       max-height: var(--sv-size-48);
       overflow-y: auto;
       background-color: var(--sv-bg-surface);
       border: 1px solid var(--sv-border-medium);
       border-top: none;
       border-radius: 0 0 var(--sv-radius-md) var(--sv-radius-md);
       z-index: var(--sv-z-index-dropdown);
       box-shadow: var(--sv-shadow-md);
       
       &-item {
         padding: var(--sv-padding-2) var(--sv-padding-3);
         cursor: pointer;
         
         &:hover {
           background-color: var(--sv-bg-element-hover);
         }
         
         &.selected {
           background-color: var(--sv-bg-element-active);
           color: var(--sv-primary);
         }
       }
     }
   }
   
   // Text field with character limit
   .sv-text-field-with-limit {
     .sv-input-counter {
       display: flex;
       justify-content: flex-end;
       margin-top: var(--sv-space-1);
       font-size: var(--sv-text-xs);
       color: var(--sv-text-tertiary);
       
       &.near-limit {
         color: var(--sv-warning);
       }
       
       &.at-limit {
         color: var(--sv-error);
       }
     }
   }
   
   /* ==========================================================================
      4. COMPONENT-SPECIFIC STATES
      ========================================================================== */
   
   // Specific to text field: highlighting when text is being edited
   .sv-text-field {
     &:focus-within {
       border-color: var(--sv-primary);
       box-shadow: var(--sv-shadow-focus);
     }
     
     // Selection styling
     &::selection {
       background-color: var(--sv-primary-light);
       color: var(--sv-text-on-dark);
     }
   }
   
   /* ==========================================================================
      5. RESPONSIVE ADJUSTMENTS
      ========================================================================== */
   
   @include breakpoint-down(sm) {
     .sv-text-field {
       font-size: var(--sv-text-sm);
       
       // Adjust padding for smaller screens
       padding: var(--sv-padding-2) var(--sv-padding-2);
       
       // Full width on mobile
       width: 100%;
       max-width: 100%;
     }
     
     .sv-text-field-multiline {
       min-height: calc($input-height * 1.5);
     }
   }
   
   // For very small screens, reduce padding further
   @include breakpoint-down(xs) {
     .sv-text-field {
       padding: var(--sv-padding-1) var(--sv-padding-2);
     }
   }