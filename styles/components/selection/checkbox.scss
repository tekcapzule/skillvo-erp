/**
 * Checkbox Component Styles
 * Version: 1.0.0
 * Last Updated: April 29, 2025
 * 
 * This file contains styles specific to the checkbox component,
 * extending the selection-control-base class.
 */

/* ==========================================================================
   TABLE OF CONTENTS:
   
   1. CHECKBOX SPECIFIC STYLES
   2. CHECKBOX VARIATIONS
   3. CHECKBOX STATES
   4. CHECKBOX ANIMATIONS
   5. ACCESSIBILITY ENHANCEMENTS
   ========================================================================== */

/* ==========================================================================
   1. CHECKBOX SPECIFIC STYLES
   ========================================================================== */

   .sv-checkbox {
    // Extend the base selection control class
    @extend .sv-selection-control-base;
    
    // Checkbox-specific control styles
    &__control {
      border-radius: var(--sv-radius-sm);
      
      // Checkbox-specific indicator (checkmark)
      &::after {
        @include checkbox-indicator;
      }
    }
    
    // Indeterminate state styling
    input:indeterminate + .sv-checkbox__control::after {
      transform: translate(-50%, -50%) scale(1);
      width: 50%;
      height: 2px;
      border: none;
      background-color: var(--sv-text-on-dark);
    }
    
    // Apply transitions for smooth state changes
    input:checked + .sv-checkbox__control::after {
      transform: translate(-50%, -70%) rotate(-45deg) scale(1);
      transition: transform var(--sv-motion-duration-short) var(--sv-motion-ease-decelerate);
    }
  }
  
  /* ==========================================================================
     2. CHECKBOX VARIATIONS
     ========================================================================== */
  
  // Tile checkbox - a larger checkbox with more padding and optional description
  .sv-checkbox-tile {
    @extend .sv-checkbox;
    display: flex;
    flex-direction: column;
    width: 100%;
    border: 1px solid var(--sv-border-medium);
    border-radius: var(--sv-radius-md);
    padding: var(--sv-padding-3);
    transition: border-color var(--sv-motion-duration-short) var(--sv-motion-ease-standard),
                background-color var(--sv-motion-duration-short) var(--sv-motion-ease-standard);
    
    &:hover {
      border-color: var(--sv-border-dark);
      background-color: var(--sv-bg-element-hover);
    }
    
    .sv-checkbox__control {
      margin-right: var(--sv-space-3);
    }
    
    .sv-checkbox__label {
      font-weight: var(--sv-font-medium);
    }
    
    &.selected,
    input:checked ~ & {
      border-color: var(--sv-primary);
      background-color: var(--sv-bg-element-active);
    }
    
    // Responsive adjustments
    @include breakpoint-down(sm) {
      padding: var(--sv-padding-2);
      
      .sv-checkbox__label {
        font-size: var(--sv-text-sm);
      }
    }
  }
  
  // Image checkbox - checkbox with an image
  .sv-checkbox-image {
    @extend .sv-checkbox;
    position: relative;
    
    &__img-container {
      position: relative;
      margin-bottom: var(--sv-space-2);
      border-radius: var(--sv-radius-md);
      overflow: hidden;
      
      img {
        display: block;
        width: 100%;
        transition: opacity var(--sv-motion-duration-short) var(--sv-motion-ease-standard);
      }
    }
    
    .sv-checkbox__control {
      position: absolute;
      top: var(--sv-space-2);
      right: var(--sv-space-2);
      background-color: var(--sv-bg-surface);
      border-color: var(--sv-border-medium);
    }
    
    input:checked ~ .sv-checkbox-image__img-container {
      box-shadow: 0 0 0 2px var(--sv-primary);
    }
    
    &:hover .sv-checkbox-image__img-container img {
      opacity: 0.9;
    }
  }
  
  /* ==========================================================================
     3. CHECKBOX STATES
     ========================================================================== */
  
  // Custom states beyond what's inherited from selection-control-base
  .sv-checkbox {
    // Read-only state - distinct from disabled
    &.readonly {
      cursor: default;
      
      .sv-checkbox__control {
        background-color: var(--sv-bg-element);
        border-color: var(--sv-border-light);
      }
      
      .sv-checkbox__label {
        color: var(--sv-text-secondary);
      }
    }
    
    // Required indicator
    &.required .sv-checkbox__label::after {
      content: "*";
      color: var(--sv-error);
      margin-left: var(--sv-space-1);
    }
    
    // Custom invalid/valid states (beyond what's in the base)
    &.invalid .sv-checkbox__description {
      color: var(--sv-error);
    }
    
    &.valid .sv-checkbox__description {
      color: var(--sv-success);
    }
  }
  
  /* ==========================================================================
     4. CHECKBOX ANIMATIONS
     ========================================================================== */
  
  // Animation for checkbox when checked
  @keyframes checkbox-check {
    0% {
      transform: translate(-50%, -70%) rotate(-45deg) scale(0);
    }
    50% {
      transform: translate(-50%, -70%) rotate(-45deg) scale(1.2);
    }
    100% {
      transform: translate(-50%, -70%) rotate(-45deg) scale(1);
    }
  }
  
  // Apply animation class
  .sv-checkbox.sv-checkbox-animate {
    input:checked + .sv-checkbox__control::after {
      animation: checkbox-check var(--sv-motion-duration-short) var(--sv-motion-ease-standard);
    }
    
    // Respect user preferences
    @media (prefers-reduced-motion: reduce) {
      input:checked + .sv-checkbox__control::after {
        animation: none;
      }
    }
  }
  
  /* ==========================================================================
     5. ACCESSIBILITY ENHANCEMENTS
     ========================================================================== */
  
  // High contrast mode adjustments
  @media (forced-colors: active) {
    .sv-checkbox {
      &__control {
        border: 2px solid CanvasText;
        
        &::after {
          border-color: Canvas;
        }
      }
      
      input:checked + .sv-checkbox__control {
        background-color: Highlight;
        border-color: Highlight;
        
        &::after {
          border-color: Canvas;
        }
      }
      
      &.invalid .sv-checkbox__control {
        border-color: Mark;
      }
    }
    
    .sv-checkbox-tile {
      border: 1px solid CanvasText;
      
      &.selected,
      input:checked ~ & {
        border: 2px solid Highlight;
      }
    }
    
    .sv-checkbox-image {
      input:checked ~ .sv-checkbox-image__img-container {
        outline: 2px solid Highlight;
        outline-offset: 2px;
      }
    }
  }
  /* ==========================================================================
   6. RESPONSIVE ADJUSTMENTS
   ========================================================================== */

@include breakpoint-down(sm) {
  .sv-checkbox {
    // Increase touch target size for mobile
    &__control {
      width: calc(var(--sv-size-4) * 1.2);
      height: calc(var(--sv-size-4) * 1.2);
      min-width: calc(var(--sv-size-4) * 1.2);
      min-height: calc(var(--sv-size-4) * 1.2);
    }
    
    // Adjust spacing for mobile views
    & + & {
      margin-top: var(--sv-space-4);
    }
    
    // Adjust label font size for better readability
    &__label {
      font-size: var(--sv-text-sm);
    }
    
    // Ensure description is clearly readable
    &__description {
      font-size: var(--sv-text-xs);
      margin-top: var(--sv-space-2);
    }
    
    // Update checkbox indicator size for larger control
    input:checked + .sv-checkbox__control::after {
      width: calc(var(--sv-size-4) * 0.6 * 0.5);
      height: calc(var(--sv-size-4) * 0.6 * 0.25);
      border-width: 3px;
    }
  }
  
  // Stack checkbox items vertically with proper spacing
  .sv-checkbox-tile {
    margin-bottom: var(--sv-space-3);
    padding: var(--sv-padding-3) var(--sv-padding-2);
    
    // When stacked in a group, add spacing
    & + .sv-checkbox-tile {
      margin-top: var(--sv-space-2);
    }
  }
  
  // Make image checkboxes more mobile-friendly
  .sv-checkbox-image {
    // Full width on mobile
    max-width: 100%;
    
    &__img-container {
      // Maintain aspect ratio but don't make images too tall
      img {
        max-height: 200px;
        object-fit: cover;
      }
    }
    
    // Make the checkbox control more visible on images
    .sv-checkbox__control {
      width: calc(var(--sv-size-4) * 1.4);
      height: calc(var(--sv-size-4) * 1.4);
      // Add subtle background to ensure visibility on any image
      box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.8);
    }
  }
  
  // Adjust checkbox group layouts
  .sv-checkbox-group {
    &.horizontal {
      // Stack items on mobile
      flex-direction: column;
      
      .sv-checkbox {
        margin-right: 0;
        margin-bottom: var(--sv-space-3);
      }
    }
    
    // Improve touch targets for inline checkbox groups
    &.inline .sv-checkbox {
      margin-right: var(--sv-space-4);
      margin-bottom: var(--sv-space-3);
    }
  }
}

// Tablet-specific adjustments
@include breakpoint-between(sm, md) {
  .sv-checkbox-group.horizontal {
    .sv-checkbox {
      flex: 0 0 calc(50% - var(--sv-space-2)); // 2 per row on tablets
    }
  }
  
  // Create grid layout for image checkboxes on tablets
  .sv-checkbox-image-group {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--sv-space-3);
    
    .sv-checkbox-image {
      margin: 0;
    }
  }
}

// Larger screen optimizations
@include breakpoint-up(lg) {
  // Grid layout for image checkboxes on desktop
  .sv-checkbox-image-group {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--sv-space-4);
  }
  
  // Smooth hover effects only on devices with hover capability
  @media (hover: hover) {
    .sv-checkbox-tile:hover {
      transform: translateY(-2px);
      box-shadow: var(--sv-shadow-sm);
    }
    
    .sv-checkbox-image:hover .sv-checkbox-image__img-container {
      transform: scale(1.02);
      transition: transform var(--sv-motion-duration-short) var(--sv-motion-ease-standard);
    }
  }
}