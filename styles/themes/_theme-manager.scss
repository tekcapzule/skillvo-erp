// ========================================
// Theme Manager
// ========================================
// This file manages the application's theming system and provides utilities
// for theme switching, theme-specific styles, and theme detection.

// ========================================
// Theme System Architecture
// ========================================
// 
// The theme system follows these principles:
//
// 1. CSS Custom Properties (Variables)
//    - All theme colors and properties are defined as CSS variables
//    - The light theme is defined on :root as the default
//    - Other themes override these variables using class selectors
//
// 2. Theme Switching
//    - Themes are toggled via data-theme attribute on the html element
//    - A theme-transition class controls animation timing during theme change
//    - Themes can be switched dynamically at runtime without page reload
//
// 3. Theme Selection Strategy
//    - User preference stored in localStorage has highest priority
//    - If no preference exists, system preference is detected (prefers-color-scheme)
//    - If neither exists, default to light theme
//
// 4. Theme Integration Points
//    - Angular ThemeService in core/services/theme.service.ts manages theme state
//    - User can toggle themes via UI in user-profile.component.ts
//    - HTML data attributes and CSS classes control actual style application

// Import themes
@import 'light';
@import 'dark';
@import 'ocean';
@import 'classic';

// ========================================
// Theme System
// ========================================

// Theme transition applied to the body
// This ensures smooth transitions between themes
html.theme-transition * {
  transition: background-color 0.3s ease, 
              color 0.3s ease, 
              border-color 0.3s ease,
              box-shadow 0.3s ease;
}

// OS preference detection
// Apply dark theme if user prefers dark color scheme
@media (prefers-color-scheme: dark) {
  html:not([data-theme]) {
    @extend .dark-theme;
  }
}

// Theme class applications
// Apply the appropriate theme class based on the data-theme attribute
html[data-theme="light"] {
  // Light theme is the default (CSS variables are set on :root)
}

html[data-theme="dark"] {
  @extend .dark-theme;
}

html[data-theme="ocean"] {
  @extend .ocean-theme;
}

html[data-theme="classic"] {
  @extend .classic-theme;
}

// ========================================
// Theme Utility Classes
// ========================================

// Text color utility classes for theming
.text-theme-primary {
  color: var(--primary-600);
  
  .dark-theme &, 
  html[data-theme="dark"] & {
    color: var(--primary-400);
  }
  
  .ocean-theme &, 
  html[data-theme="ocean"] & {
    color: var(--primary-600);
  }
  
  .classic-theme &, 
  html[data-theme="classic"] & {
    color: var(--primary-700);
  }
}

.text-theme-secondary {
  color: var(--secondary-600);
  
  .dark-theme &, 
  html[data-theme="dark"] & {
    color: var(--secondary-400);
  }
  
  .ocean-theme &, 
  html[data-theme="ocean"] & {
    color: var(--secondary-600);
  }
  
  .classic-theme &, 
  html[data-theme="classic"] & {
    color: var(--secondary-600);
  }
}

// Background color utility classes
.bg-theme-primary {
  background-color: var(--bg-primary);
}

.bg-theme-secondary {
  background-color: var(--bg-secondary);
}

.bg-theme-surface {
  background-color: var(--bg-surface);
}

.bg-theme-app {
  background-color: var(--bg-app);
}

// ========================================
// JavaScript/TypeScript Theme Switching Implementation
// ========================================
// The below code is for reference and documents the theme switching logic
// that should be implemented in the application's TypeScript code.
// This is NOT active code in the SCSS file.

/*
  // ==== ANGULAR IMPLEMENTATION ====
  // Theme switching in Angular is managed by the ThemeService class
  // located at: /src/app/core/services/theme.service.ts
  
  @Injectable({
    providedIn: 'root'
  })
  export class ThemeService {
    // Observable stream of the current theme
    private currentTheme = new BehaviorSubject<ThemeName>('light');
    currentTheme$ = this.currentTheme.asObservable();
    
    constructor() {
      // Initialize theme based on saved preference or OS setting
      this.initTheme();
    }
    
    // Set a specific theme
    setTheme(themeName: 'light' | 'dark' | 'ocean' | 'classic'): void {
      // Add transition class for smooth theme change
      document.documentElement.classList.add('theme-transition');
      
      // Update theme attribute
      document.documentElement.setAttribute('data-theme', themeName);
      
      // Store preference for future visits
      localStorage.setItem('theme', themeName);
      
      // Update observable state
      this.currentTheme.next(themeName);
      
      // Remove transition class after animation completes
      setTimeout(() => {
        document.documentElement.classList.remove('theme-transition');
      }, 300);
    }
    
    // Initialize theme based on preferences
    private initTheme(): void {
      // Check for stored preference
      const savedTheme = localStorage.getItem('theme');
      
      if (savedTheme && ['light', 'dark', 'ocean', 'classic'].includes(savedTheme)) {
        // Use saved preference
        this.setTheme(savedTheme as any);
      } else {
        // Check system preference
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        this.setTheme(prefersDark ? 'dark' : 'light');
      }
    }
  }
  
  // Usage in components:
  // 1. Inject the service: constructor(private themeService: ThemeService) {}
  // 2. Set theme: this.themeService.setTheme('dark');
  // 3. React to theme changes: this.themeService.currentTheme$.subscribe(theme => {...})
*/
