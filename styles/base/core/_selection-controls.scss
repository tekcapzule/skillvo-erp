/**
 * Selection Controls Base - Core Styles
 * Version: 1.0.0
 * Last Updated: April 29, 2025
 * 
 * This file establishes the foundational styles for all selection control components
 * in the SkillVo design system. It serves as the second level in our 
 * three-tier styling architecture:
 * 1. sv-ui-control-base - Base styles for all interactive controls
 * 2. sv-selection-control-base (this file) - Base styles for all selection controls
 * 3. Component-specific classes (e.g., sv-checkbox, sv-radio, sv-switch)
 *
 * Selection controls include checkboxes, radio buttons, switches, and other
 * components that allow users to select options from a set of choices.
 */

/* ==========================================================================
   TABLE OF CONTENTS:
   
   1. VARIABLES & CONFIGURATION
   2. MIXINS
      2.1 Selection Control Specific Mixins
   3. BASE CLASS DEFINITION
   4. SIZE VARIATIONS
   5. SELECTION STATES
   6. ACCESSIBILITY ENHANCEMENTS
   7. PRINT STYLES
   ========================================================================== */

/* ==========================================================================
   1. VARIABLES & CONFIGURATION
   ========================================================================== */
   @use './base-control' as *;

// Selection control properties
$selection-control-size: var(--sv-size-4);
$selection-control-border-width: 2px;
$selection-control-transition: all var(--sv-motion-duration-short) var(--sv-motion-ease-standard);

// Indicator properties (for checkmarks, dots, etc.)
$indicator-color: var(--sv-text-on-dark);
$indicator-size-ratio: 0.5; // Size of the indicator in relation to the control

/* ==========================================================================
   2. MIXINS
   ========================================================================== */

/* 2.1 Selection Control Specific Mixins
   ========================================================================== */

// Base styles for selection control indicators (checkmarks, dots, etc.)
@mixin selection-indicator-base {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0);
  transition: transform var(--sv-motion-duration-short) var(--sv-motion-ease-standard);
}

// Checkbox indicator (checkmark) styling
@mixin checkbox-indicator {
  content: '';
  width: calc($selection-control-size * $indicator-size-ratio);
  height: calc($selection-control-size * $indicator-size-ratio * 0.5);
  border-left: 2px solid $indicator-color;
  border-bottom: 2px solid $indicator-color;
  transform: translate(-50%, -70%) rotate(-45deg) scale(0);
}

// Radio indicator (dot) styling
@mixin radio-indicator {
  content: '';
  width: calc($selection-control-size * $indicator-size-ratio);
  height: calc($selection-control-size * $indicator-size-ratio);
  border-radius: 50%;
  background-color: $indicator-color;
}

// Ensure sufficient separation between adjacent controls
@mixin selection-control-spacing {
  & + & {
    margin-top: var(--sv-space-3);
  }
  
  &.sv-selection-control-inline + &.sv-selection-control-inline {
    margin-top: 0;
    margin-left: var(--sv-space-4);
  }
}

// Focus styles specific to selection controls
@mixin selection-control-focus {
  &:focus-visible {
    border-color: var(--sv-primary);
    box-shadow: 0 0 0 $focus-ring-offset var(--sv-primary-light);
  }
}

/* ==========================================================================
   3. BASE CLASS DEFINITION
   ========================================================================== */

.sv-selection-control-base {
  // Inherit all base UI control styles
  @extend .sv-ui-control-base;
  
  // Basic layout and appearance
  position: relative;
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  
  // Reset some inherited properties that don't apply to selection controls
  background-color: transparent;
  padding: 0;
  
  // Apply spacing between stacked controls
  @include selection-control-spacing;
  
  // Selection control input (checkbox, radio, etc.)
  &__input {
    // Hidden but accessible for screen readers
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
    margin: 0;
    
    // Focus styles handled via the control element
    &:focus-visible + .sv-selection-control-base__control {
      @include focus-visible-state;
    }
    
    // Checked state styling
    &:checked + .sv-selection-control-base__control {
      background-color: var(--sv-primary);
      border-color: var(--sv-primary);
      
      &::after {
        transform: translate(-50%, -50%) scale(1);
      }
    }
    
    // Special styling for indeterminate state (mainly for checkboxes)
    &:indeterminate + .sv-selection-control-base__control {
      background-color: var(--sv-primary-light);
      border-color: var(--sv-primary);
      
      &::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 50%;
        height: 2px;
        background-color: $indicator-color;
        transform: translate(-50%, -50%) scale(1);
      }
    }
    
    // Disabled state styling
    &:disabled + .sv-selection-control-base__control {
      @include disabled-state;
      
      & ~ .sv-selection-control-base__label {
        color: var(--sv-text-tertiary);
        cursor: not-allowed;
      }
    }
  }
  
  // The visual control element (the box/circle that gets checked)
  &__control {
    position: relative;
    display: inline-block;
    width: $selection-control-size;
    height: $selection-control-size;
    min-width: $selection-control-size;
    min-height: $selection-control-size;
    background-color: var(--sv-bg-surface);
    border: $selection-control-border-width solid var(--sv-border-medium);
    transition: $selection-control-transition;
    
    &::after {
      @include selection-indicator-base;
    }
    
    // Apply hover state
    .sv-selection-control-base:hover &:not(.disabled) {
      border-color: var(--sv-border-dark);
      background-color: var(--sv-bg-element-hover);
    }
  }
  
  // The label text
  &__label {
    margin-left: var(--sv-space-3);
    font-size: var(--sv-text-base);
    color: var(--sv-text-primary);
    user-select: none;
  }
  
  // Container for additional help text or validation messages
  &__description {
    display: block;
    margin-top: var(--sv-space-1);
    margin-left: calc($selection-control-size + var(--sv-space-3));
    font-size: var(--sv-text-sm);
    color: var(--sv-text-secondary);
  }
  
  // Error state styling
  &.has-error,
  &.error,
  &[aria-invalid="true"] {
    .sv-selection-control-base__control {
      border-color: var(--sv-error);
    }
    
    .sv-selection-control-base__description {
      color: var(--sv-error);
    }
  }
  
  // Success state styling
  &.has-success,
  &.success,
  &[aria-invalid="false"] {
    .sv-selection-control-base__control {
      border-color: var(--sv-success);
    }
    
    .sv-selection-control-base__description {
      color: var(--sv-success);
    }
  }
  
  // Required indicator
  &.required .sv-selection-control-base__label::after {
    content: "*";
    color: var(--sv-error);
    margin-left: var(--sv-space-1);
  }
}

/* ==========================================================================
   4. SIZE VARIATIONS
   ========================================================================== */

// Small size
.sv-selection-control-base.sv-ui-size-sm {
  .sv-selection-control-base__control {
    width: calc($selection-control-size * 0.75);
    height: calc($selection-control-size * 0.75);
    min-width: calc($selection-control-size * 0.75);
    min-height: calc($selection-control-size * 0.75);
  }
  
  .sv-selection-control-base__label {
    font-size: var(--sv-text-sm);
  }
  
  .sv-selection-control-base__description {
    font-size: var(--sv-text-xs);
    margin-left: calc((#{$selection-control-size} * 0.75) + var(--sv-space-3));
  }
}

// Large size
.sv-selection-control-base.sv-ui-size-lg {
  .sv-selection-control-base__control {
    width: calc($selection-control-size * 1.25);
    height: calc($selection-control-size * 1.25);
    min-width: calc($selection-control-size * 1.25);
    min-height: calc($selection-control-size * 1.25);
  }
  
  .sv-selection-control-base__label {
    font-size: var(--sv-text-lg);
  }
  
  .sv-selection-control-base__description {
    font-size: var(--sv-text-base);
    margin-left: calc((#{$selection-control-size} * 1.25) + var(--sv-space-3));
  }
}

/* ==========================================================================
   5. SELECTION STATES
   ========================================================================== */

// Horizontal layout for selection controls
.sv-selection-control-inline {
  display: inline-flex;
  margin-right: var(--sv-space-4);
}

// Group container for selection controls
.sv-selection-control-group {
  display: flex;
  flex-direction: column;
  
  &.sv-selection-control-group-horizontal {
    flex-direction: row;
    flex-wrap: wrap;
    gap: var(--sv-space-4);
  }
}

/* ==========================================================================
   6. ACCESSIBILITY ENHANCEMENTS
   ========================================================================== */

// High contrast mode adjustments for better visibility
@media (forced-colors: active) {
  .sv-selection-control-base {
    &__control {
      border: 2px solid CanvasText;
      
      &::after {
        background-color: CanvasText;
      }
    }
    
    &__input:checked + .sv-selection-control-base__control {
      background-color: Highlight;
      border-color: Highlight;
      
      &::after {
        background-color: Canvas;
      }
    }
    
    &__input:focus-visible + .sv-selection-control-base__control {
      outline: 2px solid Highlight;
      outline-offset: 2px;
    }
  }
}

/* ==========================================================================
   7. PRINT STYLES
   ========================================================================== */

@media print {
  .sv-selection-control-base {
    &__control {
      border: 1px solid #000 !important;
      box-shadow: none !important;
      
      // For print, make the selection state very clear
      &::after {
        transform: translate(-50%, -50%) scale(1) !important;
        border-color: #000 !important;
        background-color: #000 !important;
      }
    }
    
    // Ensure checked state is visible in print
    &__input:checked + .sv-selection-control-base__control::after {
      transform: translate(-50%, -50%) scale(1) !important;
    }
    
    &__label,
    &__description {
      color: #000 !important;
    }
  }
}