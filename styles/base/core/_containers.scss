/**
 * Container Base - Category-level Styles
 * Version: 1.0.0
 * Last Updated: April 29, 2025
 * 
 * This file establishes the foundational styles for all container components
 * in the SkillVo design system. It serves as the second level in our 
 * three-tier styling architecture:
 * 1. sv-ui-control-base - Base styles for all interactive controls
 * 2. sv-container-base (this file) - Base styles for all container components
 * 3. Component-specific classes (e.g., sv-card, sv-panel, sv-accordion)
 */

/* ==========================================================================
   TABLE OF CONTENTS:
   
   1. VARIABLES & CONFIGURATION
   2. MIXINS
      2.1 Container-Specific Mixins
      2.2 Layout Mixins
      2.3 Visual Style Mixins
   3. BASE CLASS DEFINITION
   4. CONTAINER VARIATIONS
      4.1 Size Variations
      4.2 Padding Variations
      4.3 Border Variations
      4.4 Background Variations
   5. CONTAINER STATES
   6. CONTAINER ANIMATION UTILITIES
   7. ACCESSIBILITY UTILITIES
   8. RESPONSIVE BEHAVIORS
   9. RTL SUPPORT
   ========================================================================== */

/* ==========================================================================
   1. VARIABLES & CONFIGURATION
   ========================================================================== */
   @use './base-control' as *;
// Container-specific variables
$container-default-radius: var(--sv-radius-md);
$container-default-shadow: var(--sv-shadow-sm);
$container-default-bg: var(--sv-bg-surface);
$container-default-border-color: var(--sv-border-light);
$container-default-border-width: 1px;
$container-default-padding: var(--sv-padding-md);

/* ==========================================================================
   2. MIXINS
   ========================================================================== */

/* 2.1 Container-Specific Mixins
   ========================================================================== */

// Basic container styling
@mixin container-base {
  display: block;
  width: 100%;
  box-sizing: border-box;
  position: relative;
  background-color: $container-default-bg;
  border: $container-default-border-width solid $container-default-border-color;
  border-radius: $container-default-radius;
}

// Flexible container with optional scrolling
@mixin flexible-container($direction: column, $scroll: auto) {
  display: flex;
  flex-direction: $direction;
  width: 100%;
  height: 100%;
  overflow: $scroll;
}

// Container with absolute positioning for overlays
@mixin overlay-container {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: var(--sv-z-index-overlay);
}

/* 2.2 Layout Mixins
   ========================================================================== */

// Container grid layout
@mixin container-grid($columns: 1fr, $rows: auto, $gap: var(--sv-space-md)) {
  display: grid;
  grid-template-columns: $columns;
  grid-template-rows: $rows;
  gap: $gap;
  width: 100%;
}

// Responsive container with max-width
@mixin container-responsive($max-width: var(--sv-container-lg)) {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
}

/* 2.3 Visual Style Mixins
   ========================================================================== */

// Container elevation with shadow
@mixin container-elevation($level: 'sm') {
  box-shadow: var(--sv-shadow-#{$level});
}

// Container with border on specific side
@mixin container-border-side($side, $width: 1px, $color: var(--sv-border-medium)) {
  border-#{$side}: $width solid $color;
}

// Container with rounded corners on specific sides
@mixin container-radius-side($side, $radius: var(--sv-radius-md)) {
  @if $side == 'top' {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  } @else if $side == 'right' {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  } @else if $side == 'bottom' {
    border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  } @else if $side == 'left' {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
}

/* ==========================================================================
   3. BASE CLASS DEFINITION
   ========================================================================== */

.sv-container-base {
  // Inherit from the main control base class
  @extend .sv-ui-control-base;
  
  // Apply container-specific base styling
  @include container-base;
  
  // Override/extend specific properties from base control
  padding: $container-default-padding;
  
  // Container-specific behavior
  overflow: visible;
  
  // Focus behavior specific to containers
  &:focus {
    // We want a more subtle focus state for containers
    box-shadow: var(--sv-shadow-sm);
  }
  
  // Container-specific hover behavior (optional)
  &:hover:not(:disabled):not(.disabled) {
    // Only apply hover effects if the container is interactive
    &.is-interactive {
      background-color: var(--sv-bg-element-hover);
    }
  }
  
  // Active state specific to containers
  &:active:not(:disabled):not(.disabled) {
    // Only apply active effects if the container is interactive
    &.is-interactive {
      background-color: var(--sv-bg-element-active);
    }
  }
  
  // Container-specific disabled state
  &:disabled,
  &.disabled {
    opacity: 0.75; // Less opacity reduction than interactive controls
  }
}

/* ==========================================================================
   4. CONTAINER VARIATIONS
   ========================================================================== */

/* 4.1 Size Variations
   ========================================================================== */

// Standard size variations
.sv-container-size-xs {
  min-height: var(--sv-size-8);
}

.sv-container-size-sm {
  min-height: var(--sv-size-12);
}

.sv-container-size-md {
  min-height: var(--sv-size-16);
}

.sv-container-size-lg {
  min-height: var(--sv-size-24);
}

.sv-container-size-xl {
  min-height: var(--sv-size-32);
}

// Full-height variation
.sv-container-full-height {
  height: 100%;
}

// Full-width variation (default, but explicitly defined for clarity)
.sv-container-full-width {
  width: 100%;
}

// Auto-sized container that sizes to content
.sv-container-auto {
  width: auto;
  height: auto;
}

/* 4.2 Padding Variations
   ========================================================================== */

// Standard padding variations
.sv-container-padding-none {
  padding: 0;
}

.sv-container-padding-xs {
  padding: var(--sv-padding-xs);
}

.sv-container-padding-sm {
  padding: var(--sv-padding-sm);
}

.sv-container-padding-md {
  padding: var(--sv-padding-md);
}

.sv-container-padding-lg {
  padding: var(--sv-padding-lg);
}

.sv-container-padding-xl {
  padding: var(--sv-padding-xl);
}

// Directional padding
.sv-container-padding-x-only {
  padding-top: 0;
  padding-bottom: 0;
}

.sv-container-padding-y-only {
  padding-left: 0;
  padding-right: 0;
}

/* 4.3 Border Variations
   ========================================================================== */

// Border styles
.sv-container-border-none {
  border: none;
}

.sv-container-border-thin {
  border-width: 1px;
}

.sv-container-border-medium {
  border-width: 2px;
}

.sv-container-border-thick {
  border-width: 3px;
}

// Border sides
.sv-container-border-top {
  border: none;
  @include container-border-side('top');
}

.sv-container-border-right {
  border: none;
  @include container-border-side('right');
}

.sv-container-border-bottom {
  border: none;
  @include container-border-side('bottom');
}

.sv-container-border-left {
  border: none;
  @include container-border-side('left');
}

// Radius variations
.sv-container-radius-none {
  border-radius: 0;
}

.sv-container-radius-sm {
  border-radius: var(--sv-radius-sm);
}

.sv-container-radius-md {
  border-radius: var(--sv-radius-md);
}

.sv-container-radius-lg {
  border-radius: var(--sv-radius-lg);
}

.sv-container-radius-xl {
  border-radius: var(--sv-radius-xl);
}

// Partial radius (rounded on specific sides)
.sv-container-radius-top {
  @include container-radius-side('top');
}

.sv-container-radius-right {
  @include container-radius-side('right');
}

.sv-container-radius-bottom {
  @include container-radius-side('bottom');
}

.sv-container-radius-left {
  @include container-radius-side('left');
}

/* 4.4 Background Variations
   ========================================================================== */

.sv-container-bg-primary {
  background-color: var(--sv-bg-primary);
}

.sv-container-bg-secondary {
  background-color: var(--sv-bg-secondary);
}

.sv-container-bg-surface {
  background-color: var(--sv-bg-surface);
}

.sv-container-bg-element {
  background-color: var(--sv-bg-element);
}

.sv-container-bg-transparent {
  background-color: transparent;
}

/* ==========================================================================
   5. CONTAINER STATES
   ========================================================================== */

// Elevated containers
.sv-container-elevated-sm {
  @include container-elevation('sm');
}

.sv-container-elevated-md {
  @include container-elevation('md');
}

.sv-container-elevated-lg {
  @include container-elevation('lg');
}

// Interactive container (responds to hover/focus)
.sv-container-interactive {
  cursor: pointer;
  
  &:hover {
    background-color: var(--sv-bg-element-hover);
  }
  
  &:active {
    background-color: var(--sv-bg-element-active);
  }
}

// Overflow behavior
.sv-container-overflow-hidden {
  overflow: hidden;
}

.sv-container-overflow-auto {
  overflow: auto;
}

.sv-container-overflow-scroll {
  overflow: scroll;
}

.sv-container-overflow-visible {
  overflow: visible;
}

// Special states
.sv-container-selected {
  border-color: var(--sv-primary);
  background-color: var(--sv-bg-element-hover);
}

.sv-container-highlighted {
  border-color: var(--sv-primary);
  background-color: rgba(var(--sv-primary-500-rgb), 0.05);
}

/* ==========================================================================
   6. CONTAINER ANIMATION UTILITIES
   ========================================================================== */

// Fade transition for containers
.sv-container-fade {
  transition: opacity var(--sv-motion-duration-medium) var(--sv-motion-ease-standard);
}

// Scale transition for containers
.sv-container-scale {
  transition: transform var(--sv-motion-duration-medium) var(--sv-motion-ease-standard);
}

// Slide transition for containers
.sv-container-slide {
  transition: transform var(--sv-motion-duration-medium) var(--sv-motion-ease-standard);
}

/* ==========================================================================
   7. ACCESSIBILITY UTILITIES
   ========================================================================== */

// Make container focusable
.sv-container-focusable {
  &:focus {
    @include focus-state;
  }

  &:focus-visible {
    @include focus-visible-state;
  }
}

// Region role for sections
.sv-container-region {
  &[role="region"] {
    &:focus {
      outline: none;
    }
  }
}

/* ==========================================================================
   8. RESPONSIVE BEHAVIORS
   ========================================================================== */

// Responsive container sizes
.sv-container-responsive-sm {
  @include container-responsive(var(--sv-container-sm));
}

.sv-container-responsive-md {
  @include container-responsive(var(--sv-container-md));
}

.sv-container-responsive-lg {
  @include container-responsive(var(--sv-container-lg));
}

.sv-container-responsive-xl {
  @include container-responsive(var(--sv-container-xl));
}

.sv-container-responsive-xxl {
  @include container-responsive(var(--sv-container-xxl));
}

// Responsive padding adjustments
@media (max-width: var(--sv-breakpoint-sm)) {
  .sv-container-base {
    padding: var(--sv-padding-sm);
  }
}

/* ==========================================================================
   9. RTL SUPPORT
   ========================================================================== */

[dir="rtl"] {
  .sv-container-base {
    // Adjust directional properties for RTL support
    &.has-directional-padding {
      padding-right: var(--sv-padding-start, var(--sv-padding-md));
      padding-left: var(--sv-padding-end, var(--sv-padding-md));
    }

    // Adjust any container-specific RTL behaviors
    &.sv-container-border-left {
      border: none;
      @include container-border-side('right');
    }

    &.sv-container-border-right {
      border: none;
      @include container-border-side('left');
    }
  }
}