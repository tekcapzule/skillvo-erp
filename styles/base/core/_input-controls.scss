/**
 * Input Controls Base - Core Styles
 * Version: 2.0.0
 * Last Updated: June 29, 2024
 * 
 * This file establishes the foundational styles for all input control components
 * in the SkillVo design system. It serves as the second level in our 
 * three-tier styling architecture:
 * 1. sv-ui-control-base - Base styles for all interactive controls
 * 2. sv-input-control-base (this file) - Base styles for all input controls
 * 3. Component-specific classes (e.g., sv-input-text, sv-textarea, sv-select)
 *
 * Input controls include text fields, textareas, select dropdowns, and other
 * components that allow users to input data.
 * 
 * For extension points and layer boundaries documentation, see:
 * styles/docs/base-control-extensions.md
 */

/* ==========================================================================
   TABLE OF CONTENTS:
   
   1. IMPORTS
   2. VARIABLES & CONFIGURATION
   3. BASE CLASS DEFINITION
   4. FIELD STYLING
   5. LABEL & HELPER TEXT STYLING
   6. STATE STYLING
   7. SIZE VARIATIONS
   8. ACCESSIBILITY ENHANCEMENTS
   ========================================================================== */

/* ==========================================================================
   1. IMPORTS
   ========================================================================== */
@use 'sass:map';
@use './../../abstracts/variables/' as *;
@use './../utils/mixins/state' as state;
@use './../utils/mixins/layout' as layout;
@use './../utils/mixins/typography' as typography;
@use './../utils/mixins/accessibility' as a11y;

/* ==========================================================================
   2. VARIABLES & CONFIGURATION
   ========================================================================== */

// Input-specific spacing
$input-padding-x: var(--sv-space-3);
$input-padding-y: var(--sv-space-2);

// Input-specific sizing
$input-min-width: var(--sv-size-40);
$input-height: var(--sv-control-height-md);

// Color configuration
$input-placeholder-color: var(--sv-text-tertiary);
$input-border-width: 1px;

/* ==========================================================================
   3. BASE CLASS DEFINITION
   ========================================================================== */

/**
 * The sv-input-control-base class provides foundational styling for all
 * input-based UI controls such as text fields, textareas, and select dropdowns.
 * 
 * This class extends sv-ui-control-base and adds input-specific styling.
 */
.sv-input-control-base {
  // Inherit all base UI control styles
  @extend .sv-ui-control-base;
  
  // Input-specific resets and base styles
  position: relative;
  display: block;
  width: 100%;
  min-width: $input-min-width;
  height: $input-height;
  padding: $input-padding-y $input-padding-x;
  
  // Better text input handling
  cursor: text;
  text-align: left;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  
  // Input structure components
  &__field {
    width: 100%;
    appearance: none;
    background-color: var(--sv-bg-surface);
    border: none;
    color: var(--sv-text-primary);
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    
    &:focus {
      outline: none;
    }
    
    &::placeholder {
      color: $input-placeholder-color;
      opacity: 1;
    }
  }
  
  // Label styling
  &__label {
    display: block;
    margin-bottom: var(--sv-space-2);
    font-size: var(--sv-font-size-sm);
    font-weight: var(--sv-font-weight-medium);
    color: var(--sv-text-secondary);
  }
  
  // Helper text styling
  &__helper-text {
    display: block;
    margin-top: var(--sv-space-1);
    font-size: var(--sv-font-size-xs);
    color: var(--sv-text-secondary);
  }
  
  // Input groups and connected elements
  &__group {
    position: relative;
    display: flex;
    align-items: center;
    width: 100%;
  }
  
  &__addon {
    display: flex;
    align-items: center;
    padding: 0 var(--sv-space-2);
    background-color: var(--sv-bg-element);
    border: $input-border-width solid var(--sv-border-medium);
    color: var(--sv-text-secondary);
    font-size: var(--sv-font-size-sm);
  }
  
  &__icon {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    
    &--left {
      left: var(--sv-space-3);
    }
    
    &--right {
      right: var(--sv-space-3);
    }
  }
  
  // Required input indicator
  &.required &__label::after,
  &[required] &__label::after,
  &[aria-required="true"] &__label::after {
    content: "*";
    color: var(--sv-error);
    margin-left: var(--sv-space-1);
  }
}

/* ==========================================================================
   4. FIELD STYLING
   ========================================================================== */

// Specific field type styling
.sv-input-control-base {
  // Password field styling
  &.sv-input-password &__field {
    font-family: var(--sv-font-family-mono);
    letter-spacing: 0.125em;
  }
  
  // Number input styling - remove spinners
  &.sv-input-number &__field {
    -moz-appearance: textfield;
    
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }
  
  // Search input specific styling
  &.sv-input-search &__field {
    &::-webkit-search-decoration,
    &::-webkit-search-cancel-button,
    &::-webkit-search-results-button,
    &::-webkit-search-results-decoration {
      -webkit-appearance: none;
    }
  }
  
  // Date input specific styling
  &.sv-input-date &__field,
  &.sv-input-time &__field,
  &.sv-input-datetime &__field {
    &::-webkit-calendar-picker-indicator {
      opacity: 0.6;
      cursor: pointer;
      
      &:hover {
        opacity: 1;
      }
    }
  }
  
  // Textarea styling
  &.sv-textarea {
    height: auto;
    
    &__field {
      resize: vertical;
      min-height: calc($input-height * 2);
      white-space: normal;
    }
  }
  
  // Select styling
  &.sv-select {
    position: relative;
    
    &::after {
      content: '';
      position: absolute;
      right: var(--sv-space-3);
      top: 50%;
      width: 0.5em;
      height: 0.5em;
      border: 1px solid currentColor;
      border-width: 0 1px 1px 0;
      transform: translateY(-75%) rotate(45deg);
      pointer-events: none;
    }
    
    &__field {
      appearance: none;
      padding-right: calc(var(--sv-space-3) * 2);
    }
  }
}

/* ==========================================================================
   5. LABEL & HELPER TEXT STYLING
   ========================================================================== */

// Label variations
.sv-input-control-base {
  // Floating label
  &.sv-input-floating-label {
    padding-top: var(--sv-space-5);
    
    &__label {
      position: absolute;
      top: $input-padding-y;
      left: $input-padding-x;
      margin: 0;
      transition: transform var(--sv-motion-duration-short) var(--sv-motion-ease-standard),
                  font-size var(--sv-motion-duration-short) var(--sv-motion-ease-standard);
      transform-origin: left top;
    }
    
    &__field:focus ~ &__label,
    &.has-value &__label {
      transform: translateY(-$input-padding-y) scale(0.85);
    }
  }
  
  // Counter text for character limits
  &__counter {
    display: block;
    margin-top: var(--sv-space-1);
    font-size: var(--sv-font-size-xs);
    color: var(--sv-text-secondary);
    text-align: right;
  }
}

/* ==========================================================================
   6. STATE STYLING
   ========================================================================== */

.sv-input-control-base {
  // Focus state
  &:focus-within {
    @include state.focus-state;
    border-color: var(--sv-primary);
  }
  
  // Hover state
  &:hover:not(:disabled):not(.disabled):not(:focus-within) {
    @include state.hover-state;
    border-color: var(--sv-border-dark);
  }
  
  // Disabled state
  &:disabled,
  &.disabled {
    @include state.disabled-state;
    cursor: not-allowed;
    
    &__field {
      background-color: var(--sv-bg-disabled);
    }
  }
  
  // Readonly state
  &[readonly],
  &.readonly {
    @include state.readonly-state;
    cursor: default;
    
    &__field {
      background-color: var(--sv-bg-muted);
    }
  }
  
  // Error state
  &.has-error,
  &.error,
  &[aria-invalid="true"] {
    border-color: var(--sv-error);
    
    &__helper-text,
    &__validation-message {
      color: var(--sv-error);
    }
  }
  
  // Success state
  &.has-success,
  &.success,
  &[aria-invalid="false"] {
    border-color: var(--sv-success);
    
    &__helper-text,
    &__validation-message {
      color: var(--sv-success);
    }
  }
}

/* ==========================================================================
   7. SIZE VARIATIONS
   ========================================================================== */

.sv-input-control-base {
  // Small size
  &.sv-size-sm {
    height: var(--sv-control-height-sm);
    padding: var(--sv-space-1) var(--sv-space-2);
    font-size: var(--sv-font-size-sm);
    
    &__label,
    &__helper-text {
      font-size: var(--sv-font-size-xs);
    }
  }
  
  // Default (medium) size inherits from base class
  
  // Large size
  &.sv-size-lg {
    height: var(--sv-control-height-lg);
    padding: var(--sv-space-2) var(--sv-space-4);
    font-size: var(--sv-font-size-lg);
    
    &__label {
      font-size: var(--sv-font-size-base);
    }
    
    &__helper-text {
      font-size: var(--sv-font-size-sm);
    }
  }
}

/* ==========================================================================
   8. ACCESSIBILITY ENHANCEMENTS
   ========================================================================== */

.sv-input-control-base {
  // High contrast mode support
  @include a11y.high-contrast-mode {
    border: 1px solid ButtonText;
    
    &:focus-within {
      outline: 2px solid Highlight;
      border-color: Highlight;
    }
    
    &:disabled,
    &.disabled {
      border-color: GrayText;
      color: GrayText;
    }
  }
  
  // Ensure proper focus handling for keyboard users
  &:focus-visible {
    @include a11y.focus-visible-enhanced;
  }
}