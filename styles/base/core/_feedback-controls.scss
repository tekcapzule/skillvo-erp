/**
 * Feedback Components Base - Core Styles
 * Version: 1.0.0
 * Last Updated: April 29, 2025
 * 
 * This file establishes the foundational styles for all feedback UI components
 * in the SkillVo design system. It serves as the second level in our 
 * three-tier styling architecture:
 * 1. sv-ui-control-base - Base styles for all interactive controls
 * 2. sv-feedback-base (this file) - Common styles for all feedback components
 * 3. Component-specific classes (e.g., sv-toast, sv-alert, sv-notification)
 */

/* ==========================================================================
   TABLE OF CONTENTS:
   
   1. VARIABLES & CONFIGURATION
   2. MIXINS
      2.1 Feedback-Specific Mixins
      2.2 Positioning Mixins
      2.3 Animation Mixins
   3. BASE CLASS DEFINITION
   4. FEEDBACK TYPES/SEVERITY
   5. FEEDBACK POSITIONING
   6. ACCESSIBILITY FEATURES
   7. RTL SUPPORT
   8. MOTION SENSITIVITY
   ========================================================================== */

/* ==========================================================================
   1. VARIABLES & CONFIGURATION
   ========================================================================== */
   @use './base-control' as *;

// Feedback component z-index
$feedback-z-index: var(--sv-z-index-tooltip);

// Animation durations specific to feedback components
$feedback-animation-duration: var(--sv-motion-duration-medium);

// Border width for feedback components
$feedback-border-width: 1px;

// Icon sizes
$feedback-icon-size: var(--sv-icon-size-md);

// Close button size
$feedback-close-button-size: var(--sv-btn-size-sm);

/* ==========================================================================
   2. MIXINS
   ========================================================================== */

/* 2.1 Feedback-Specific Mixins
   ========================================================================== */

// Feedback type styling (info, success, warning, error)
@mixin feedback-type($type) {
  @if $type == 'info' {
    border-color: var(--sv-info);
    background-color: rgba(41, 182, 246, 0.1);
    color: var(--sv-text-primary);
    
    .sv-feedback-icon {
      color: var(--sv-info);
    }
  } @else if $type == 'success' {
    border-color: var(--sv-success);
    background-color: rgba(76, 175, 80, 0.1);
    color: var(--sv-text-primary);
    
    .sv-feedback-icon {
      color: var(--sv-success);
    }
  } @else if $type == 'warning' {
    border-color: var(--sv-warning);
    background-color: rgba(255, 167, 38, 0.1);
    color: var(--sv-text-primary);
    
    .sv-feedback-icon {
      color: var(--sv-warning);
    }
  } @else if $type == 'error' {
    border-color: var(--sv-error);
    background-color: rgba(244, 67, 54, 0.1);
    color: var(--sv-text-primary);
    
    .sv-feedback-icon {
      color: var(--sv-error);
    }
  }
}

// Feedback layout with options for icon placement
@mixin feedback-layout($icon-position: 'left') {
  @include flex-container(row, flex-start, center, nowrap);
  
  @if $icon-position == 'left' {
    .sv-feedback-icon {
      margin-right: var(--sv-space-3);
    }
  } @else if $icon-position == 'right' {
    flex-direction: row-reverse;
    
    .sv-feedback-icon {
      margin-left: var(--sv-space-3);
    }
  } @else if $icon-position == 'top' {
    flex-direction: column;
    align-items: flex-start;
    
    .sv-feedback-icon {
      margin-bottom: var(--sv-space-2);
    }
  }
}

// Feedback icon styling
@mixin feedback-icon {
  flex-shrink: 0;
  width: $feedback-icon-size;
  height: $feedback-icon-size;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

// Close button styling for feedback components
@mixin feedback-close-button {
  position: absolute;
  top: var(--sv-space-2);
  right: var(--sv-space-2);
  width: $feedback-close-button-size;
  height: $feedback-close-button-size;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--sv-radius-full);
  background-color: transparent;
  border: none;
  cursor: pointer;
  color: var(--sv-text-secondary);
  transition: background-color $feedback-animation-duration var(--sv-motion-ease-standard);
  
  &:hover {
    background-color: var(--sv-bg-element-hover);
  }
  
  &:focus {
    @include focus-state;
  }
  
  &:focus-visible {
    @include focus-visible-state;
  }
}

/* 2.2 Positioning Mixins
   ========================================================================== */

// Position feedback at the top of the container
@mixin feedback-position-top {
  top: var(--sv-space-4);
  left: 50%;
  transform: translateX(-50%);
}

// Position feedback at the bottom of the container
@mixin feedback-position-bottom {
  bottom: var(--sv-space-4);
  left: 50%;
  transform: translateX(-50%);
}

// Position feedback at the top-right of the container
@mixin feedback-position-top-right {
  top: var(--sv-space-4);
  right: var(--sv-space-4);
}

// Position feedback at the top-left of the container
@mixin feedback-position-top-left {
  top: var(--sv-space-4);
  left: var(--sv-space-4);
}

// Position feedback at the bottom-right of the container
@mixin feedback-position-bottom-right {
  bottom: var(--sv-space-4);
  right: var(--sv-space-4);
}

// Position feedback at the bottom-left of the container
@mixin feedback-position-bottom-left {
  bottom: var(--sv-space-4);
  left: var(--sv-space-4);
}

/* 2.3 Animation Mixins
   ========================================================================== */

// Entry animation for feedback components
@mixin feedback-entry-animation($position) {
  @if $position == 'top' or $position == 'top-left' or $position == 'top-right' {
    @include animate(slide-in-down);
  } @else if $position == 'bottom' or $position == 'bottom-left' or $position == 'bottom-right' {
    @include animate(slide-in-up);
  } @else if $position == 'left' or $position == 'right' {
    @include animate(fade-in);
  }
}

// Exit animation for feedback components
@mixin feedback-exit-animation($position) {
  @if $position == 'top' or $position == 'top-left' or $position == 'top-right' {
    @include animate(slide-out-up);
  } @else if $position == 'bottom' or $position == 'bottom-left' or $position == 'bottom-right' {
    @include animate(slide-out-down);
  } @else if $position == 'left' or $position == 'right' {
    @include animate(fade-out);
  }
}

/* ==========================================================================
   3. BASE CLASS DEFINITION
   ========================================================================== */

.sv-feedback-base {
  // Inherit from the main control base class
  @extend .sv-ui-control-base;
  
  // Box model and layout
  position: relative;
  box-sizing: border-box;
  max-width: 100%;
  width: auto;
  
  // Typography
  @include typography('base', 'normal', 'normal');
  
  // Visual styling
  @include padding('4');
  @include border-radius('md');
  @include shadow('md');
  border-width: $feedback-border-width;
  border-style: solid;
  
  // Default styling
  background-color: var(--sv-bg-surface);
  border-color: var(--sv-border-medium);
  
  // Z-index for proper stacking
  z-index: $feedback-z-index;
  
  // Animation defaults
  @include transition(all, 'medium', 'standard');
  
  // Content container for flexible layout
  .sv-feedback-content {
    flex: 1;
    min-width: 0; // Ensures text truncation works
  }
  
  // Title styling
  .sv-feedback-title {
    @include typography('lg', 'semibold', 'normal');
    margin: 0 0 var(--sv-space-2) 0;
    @include text-truncate;
  }
  
  // Message styling
  .sv-feedback-message {
    @include typography('base', 'normal', 'normal');
    margin: 0;
  }
  
  // Icon styling
  .sv-feedback-icon {
    @include feedback-icon;
  }
  
  // Close button styling
  .sv-feedback-close {
    @include feedback-close-button;
  }
  
  // Ensure reasonable max-width by default
  &:not(.sv-feedback-full-width) {
    max-width: 32rem;
  }
  
  // Support for actions within feedback components
  .sv-feedback-actions {
    display: flex;
    margin-top: var(--sv-space-3);
    gap: var(--sv-space-2);
    
    &.sv-feedback-actions-end {
      justify-content: flex-end;
    }
    
    &.sv-feedback-actions-center {
      justify-content: center;
    }
    
    &.sv-feedback-actions-between {
      justify-content: space-between;
    }
  }
}

/* ==========================================================================
   4. FEEDBACK TYPES/SEVERITY
   ========================================================================== */

// Type classes for different feedback severities
.sv-feedback-info {
  @include feedback-type('info');
}

.sv-feedback-success {
  @include feedback-type('success');
}

.sv-feedback-warning {
  @include feedback-type('warning');
}

.sv-feedback-error {
  @include feedback-type('error');
}

/* ==========================================================================
   5. FEEDBACK POSITIONING
   ========================================================================== */

// Fixed positioning for floating feedback components
.sv-feedback-fixed {
  position: fixed;
}

// Absolute positioning for container-relative components
.sv-feedback-absolute {
  position: absolute;
}

// Position utility classes
.sv-feedback-position-top {
  @include feedback-position-top;
}

.sv-feedback-position-bottom {
  @include feedback-position-bottom;
}

.sv-feedback-position-top-right {
  @include feedback-position-top-right;
}

.sv-feedback-position-top-left {
  @include feedback-position-top-left;
}

.sv-feedback-position-bottom-right {
  @include feedback-position-bottom-right;
}

.sv-feedback-position-bottom-left {
  @include feedback-position-bottom-left;
}

// Full width option
.sv-feedback-full-width {
  width: calc(100% - 2 * var(--sv-space-4));
  max-width: none;
}

/* ==========================================================================
   6. ACCESSIBILITY FEATURES
   ========================================================================== */

// Support for live regions in feedback components
.sv-feedback-live {
  &[aria-live="polite"],
  &[aria-live="assertive"] {
    // Ensure live regions are properly announced
    &:not([aria-hidden="true"]) {
      // Styles to support screen reader announcements
    }
  }
}

// Ensure focus management for interactive feedback
.sv-feedback-interactive {
  // When a feedback requires user interaction, ensure it's focusable
  &:not([role="status"]) {
    // These feedback components need proper focus management
    &:focus {
      @include focus-state;
    }
    
    &:focus-visible {
      @include focus-visible-state;
    }
  }
}

/* ==========================================================================
   7. RTL SUPPORT
   ========================================================================== */

[dir="rtl"] {
  .sv-feedback-base {
    // Handle RTL layout
    .sv-feedback-icon {
      margin-right: 0;
      margin-left: var(--sv-space-3);
    }
    
    .sv-feedback-close {
      right: auto;
      left: var(--sv-space-2);
    }
    
    // Adjust RTL positioning
    &.sv-feedback-position-top-right {
      right: auto;
      left: var(--sv-space-4);
    }
    
    &.sv-feedback-position-top-left {
      left: auto;
      right: var(--sv-space-4);
    }
    
    &.sv-feedback-position-bottom-right {
      right: auto;
      left: var(--sv-space-4);
    }
    
    &.sv-feedback-position-bottom-left {
      left: auto;
      right: var(--sv-space-4);
    }
  }
}

/* ==========================================================================
   8. MOTION SENSITIVITY
   ========================================================================== */

@media (prefers-reduced-motion: reduce) {
  .sv-feedback-base {
    // Override animations for users who prefer reduced motion
    transition: opacity $feedback-animation-duration linear !important;
    animation: fade-in $feedback-animation-duration linear !important;
    
    &.sv-feedback-exiting {
      animation: fade-out $feedback-animation-duration linear !important;
    }
  }
}

// Additional keyframes needed for feedback components
@keyframes slide-out-up {
  0% {
    transform: translateY(0);
    opacity: 1;
  }
  100% {
    transform: translateY(-10px);
    opacity: 0;
  }
}

@keyframes slide-out-down {
  0% {
    transform: translateY(0);
    opacity: 1;
  }
  100% {
    transform: translateY(10px);
    opacity: 0;
  }
}