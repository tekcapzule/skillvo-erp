/**
 * Action Controls Base - Core Styles
 * Version: 2.0.0
 * Last Updated: June 29, 2024
 * 
 * This file establishes the foundational styles for all action-based UI components
 * in the SkillVo design system. This serves as the second level in our 
 * three-tier styling architecture:
 * 1. sv-ui-control-base - Base styles for all interactive controls
 * 2. sv-action-control-base (this file) - Base styles for action controls
 * 3. Component-specific classes (e.g., sv-button, sv-link, sv-icon-button)
 * 
 * For extension points and layer boundaries documentation, see:
 * styles/docs/base-control-extensions.md
 */

/* ==========================================================================
   TABLE OF CONTENTS:
   
   1. IMPORTS
   2. VARIABLES & CONFIGURATION
   3. BASE CLASS DEFINITION
   4. VARIANTS
   5. ICONOGRAPHY SUPPORT
   6. SIZE ADJUSTMENTS
   7. ACCESSIBILITY ENHANCEMENTS
   ========================================================================== */

/* ==========================================================================
   1. IMPORTS
   ========================================================================== */
@use 'sass:map';
@use './../../abstracts/variables/' as *;
@use './../utils/mixins/state' as state;
@use './../utils/mixins/layout' as layout;
@use './../utils/mixins/typography' as typography;
@use './../utils/mixins/accessibility' as a11y;

/* ==========================================================================
   2. VARIABLES & CONFIGURATION
   ========================================================================== */

// Icon spacing within action controls
$action-icon-spacing: var(--sv-space-2);

// Default action component sizing
$action-min-width: var(--sv-min-touch-target);
$action-padding-x-factor: 1.5; // Multiple of the standard padding

/* ==========================================================================
   3. BASE CLASS DEFINITION
   ========================================================================== */

/**
 * The sv-action-control-base class provides foundational styling for all
 * action-based UI controls such as buttons, links, and icon buttons.
 * 
 * This class extends sv-ui-control-base and adds action-specific styling.
 */
.sv-action-control-base {
  // Inherit all base control properties
  @extend .sv-ui-control-base;
  
  // Box model adjustments specific to action controls
  min-width: $action-min-width;
  text-align: center;
  line-height: 1.2;
  padding-left: calc(var(--sv-space-3) * $action-padding-x-factor);
  padding-right: calc(var(--sv-space-3) * $action-padding-x-factor);
  
  // Action-specific interaction models
  cursor: pointer;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  
  // Layout of content
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: $action-icon-spacing;
  white-space: nowrap;
  
  // Action-specific focus handling
  &:focus {
    @include state.focus-state;
    box-shadow: 0 0 0 var(--sv-focus-ring-width) rgba(var(--sv-primary-500-rgb), 0.25);
  }
  
  // Action-specific hover effect
  &:hover:not(:disabled):not(.disabled) {
    @include state.hover-state;
    filter: brightness(0.95);
  }
  
  // Action-specific active effect
  &:active:not(:disabled):not(.disabled) {
    @include state.active-state;
    transform: translateY(1px);
    filter: brightness(0.9);
  }
  
  // Additional loading state with size appropriate to actions
  &.loading,
  &.is-loading,
  &[aria-busy="true"] {
    position: relative;
    color: transparent;
    pointer-events: none;
    
    &::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      width: 1em;
      height: 1em;
      margin: -0.5em 0 0 -0.5em;
      border-radius: 50%;
      border: 0.125em solid transparent;
      border-top-color: currentColor;
      animation: spin var(--sv-spinner-duration, 1s) linear infinite;
    }
  }
}

/* ==========================================================================
   4. VARIANTS
   ========================================================================== */

.sv-action-control-base {
  // Primary action variant
  &.sv-action-primary {
    background-color: var(--sv-primary);
    border-color: var(--sv-primary);
    color: var(--sv-text-on-dark);
    
    &:hover:not(:disabled):not(.disabled) {
      background-color: var(--sv-primary-dark);
      border-color: var(--sv-primary-dark);
    }
    
    &:active:not(:disabled):not(.disabled) {
      background-color: var(--sv-primary-dark);
      border-color: var(--sv-primary-dark);
      transform: translateY(1px);
    }
    
    &:focus {
      box-shadow: 0 0 0 var(--sv-focus-ring-width) rgba(var(--sv-primary-500-rgb), 0.4);
    }
  }
  
  // Secondary action variant
  &.sv-action-secondary {
    background-color: var(--sv-bg-element);
    border-color: var(--sv-border-medium);
    color: var(--sv-text-primary);
    
    &:hover:not(:disabled):not(.disabled) {
      background-color: var(--sv-bg-element-hover);
      border-color: var(--sv-border-dark);
    }
    
    &:active:not(:disabled):not(.disabled) {
      background-color: var(--sv-bg-element-active);
      border-color: var(--sv-border-dark);
      transform: translateY(1px);
    }
  }
  
  // Tertiary action variant (ghost/text buttons)
  &.sv-action-tertiary {
    background-color: transparent;
    border-color: transparent;
    color: var(--sv-text-primary);
    
    &:hover:not(:disabled):not(.disabled) {
      background-color: var(--sv-bg-element-hover);
      color: var(--sv-text-accent);
    }
    
    &:active:not(:disabled):not(.disabled) {
      background-color: var(--sv-bg-element-active);
      transform: translateY(1px);
    }
  }
  
  // Destructive action variant (for delete, remove actions)
  &.sv-action-destructive {
    background-color: var(--sv-error);
    border-color: var(--sv-error);
    color: var(--sv-text-on-dark);
    
    &:hover:not(:disabled):not(.disabled) {
      background-color: var(--sv-error-dark, var(--sv-error));
      border-color: var(--sv-error-dark, var(--sv-error));
    }
    
    &:active:not(:disabled):not(.disabled) {
      background-color: var(--sv-error-darker, var(--sv-error-dark, var(--sv-error)));
      border-color: var(--sv-error-darker, var(--sv-error-dark, var(--sv-error)));
      transform: translateY(1px);
    }
    
    &:focus {
      box-shadow: 0 0 0 var(--sv-focus-ring-width) rgba(var(--sv-error-500-rgb), 0.4);
    }
  }
}

/* ==========================================================================
   5. ICONOGRAPHY SUPPORT
   ========================================================================== */

.sv-action-control-base {
  // Proper spacing for icons
  & > .sv-icon {
    flex-shrink: 0;
  }
  
  // Icon-only variant
  &.sv-action-icon-only {
    padding: var(--sv-space-2);
    min-width: var(--sv-min-touch-target);
    aspect-ratio: 1/1;
    
    > .sv-icon {
      margin: 0;
    }
  }
  
  // Icon positioning (left/right)
  &.sv-action-icon-left {
    flex-direction: row;
  }
  
  &.sv-action-icon-right {
    flex-direction: row-reverse;
  }
}

/* ==========================================================================
   6. SIZE ADJUSTMENTS
   ========================================================================== */

.sv-action-control-base {
  &.sv-size-sm {
    padding-left: calc(var(--sv-space-2) * $action-padding-x-factor);
    padding-right: calc(var(--sv-space-2) * $action-padding-x-factor);
    
    &.sv-action-icon-only {
      padding: var(--sv-space-1);
    }
  }
  
  &.sv-size-md {
    // Default size - no additional adjustments needed
  }
  
  &.sv-size-lg {
    padding-left: calc(var(--sv-space-4) * $action-padding-x-factor);
    padding-right: calc(var(--sv-space-4) * $action-padding-x-factor);
    
    &.sv-action-icon-only {
      padding: var(--sv-space-3);
    }
  }
}

/* ==========================================================================
   7. ACCESSIBILITY ENHANCEMENTS
   ========================================================================== */

.sv-action-control-base {
  // Enhanced focus visibility for keyboard users
  &:focus-visible {
    @include a11y.focus-visible-enhanced;
  }
  
  // High contrast mode support
  @include a11y.high-contrast-mode {
    border: 2px solid currentColor;
    
    &.sv-action-primary,
    &.sv-action-destructive {
      forced-color-adjust: none;
      background-color: Highlight;
      border-color: Highlight;
      color: HighlightText;
    }
  }
}