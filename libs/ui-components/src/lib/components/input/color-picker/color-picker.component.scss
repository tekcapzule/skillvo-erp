@use './../../../../../../../styles/base/utils/mixins/responsive' as responsive;
@import '../../../../../styles/base/utils/mixins/state';

// The component will extend styles from sv-input-base class,
// so we only need to add color-picker specific styling here.

// Main color picker container
.sv-color-picker {
  &-container {
    position: relative;
    display: flex;
    width: 100%;
  }
  
  // Input field with color preview
  &-field {
    flex: 1;
    display: flex;
    align-items: center;
    width: 100%;
    height: var(--sv-size-10);
    padding: var(--sv-space-2) var(--sv-space-3);
    border: 1px solid var(--sv-border-medium);
    border-radius: var(--sv-radius-md);
    background-color: var(--sv-bg-surface);
    transition: border-color var(--sv-motion-duration-short) var(--sv-motion-ease-standard),
                box-shadow var(--sv-motion-duration-short) var(--sv-motion-ease-standard);
    
    &:hover:not(.sv-input-disabled):not(.sv-input-readonly) {
      border-color: var(--sv-border-dark);
    }
    
    &:focus-within:not(.sv-input-disabled):not(.sv-input-readonly) {
      border-color: var(--sv-primary);
      box-shadow: var(--sv-shadow-focus);
    }
    
    &.sv-input-error {
      border-color: var(--sv-error);
      
      &:focus-within {
        box-shadow: var(--sv-shadow-focus-error);
      }
    }
    
    &.sv-input-success {
      border-color: var(--sv-success);
      
      &:focus-within {
        box-shadow: var(--sv-shadow-focus-success);
      }
    }
    
    &.sv-input-disabled {
      opacity: 0.65;
      cursor: not-allowed;
      background-color: var(--sv-bg-element);
      border-color: var(--sv-border-light);
      
      .sv-color-picker-field-input, 
      .sv-color-picker-toggle {
        cursor: not-allowed;
        color: var(--sv-text-tertiary);
      }
    }
    
    &.sv-input-readonly {
      background-color: var(--sv-bg-element);
      border-color: var(--sv-border-light);
      
      .sv-color-picker-field-input, 
      .sv-color-picker-toggle {
        cursor: default;
      }
    }
    
    // Color preview swatch
    &-preview {
      width: var(--sv-size-8);
      height: calc(var(--sv-size-10) - 10px);
      margin-right: var(--sv-space-2);
      border-radius: var(--sv-radius-sm);
      border: 1px solid var(--sv-border-medium);
      box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);
      
      // Checkered background for transparency
      background-image: linear-gradient(45deg, #ccc 25%, transparent 25%),
                        linear-gradient(-45deg, #ccc 25%, transparent 25%),
                        linear-gradient(45deg, transparent 75%, #ccc 75%),
                        linear-gradient(-45deg, transparent 75%, #ccc 75%);
      background-size: 10px 10px;
      background-position: 0 0, 0 5px, 5px -5px, -5px 0;
      
      &-color {
        width: 100%;
        height: 100%;
        border-radius: inherit;
      }
    }
    
    // Text input for hex/rgba value
    &-input {
      flex: 1;
      border: none;
      background: transparent;
      color: var(--sv-text-primary);
      font-family: var(--sv-font-family-mono);
      
      &:focus {
        outline: none;
      }
      
      &::placeholder {
        color: var(--sv-text-tertiary);
      }
    }
  }
  
  // Toggle button for dropdown panel
  &-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: var(--sv-space-2);
    width: var(--sv-size-8);
    height: var(--sv-size-8);
    background: none;
    border: none;
    cursor: pointer;
    color: var(--sv-text-secondary);
    &:hover {
        color: var(--sv-text-primary);
      }
      
      &:focus {
        outline: none;
        color: var(--sv-primary);
      }
      
      &-icon {
        width: var(--sv-icon-size-sm);
        height: var(--sv-icon-size-sm);
      }
    }
  }
  
  // Color dropdown panel
  .sv-color-panel {
    position: absolute;
    top: calc(100% + var(--sv-space-2));
    left: 0;
    z-index: var(--sv-z-index-dropdown);
    width: var(--sv-size-64);
    background-color: var(--sv-bg-surface);
    border: 1px solid var(--sv-border-medium);
    border-radius: var(--sv-radius-md);
    box-shadow: var(--sv-shadow-lg);
    padding: var(--sv-space-3);
    
    // Sections
    &-section {
      margin-bottom: var(--sv-space-4);
      
      &:last-child {
        margin-bottom: 0;
      }
      
      &-title {
        font-size: var(--sv-text-xs);
        font-weight: var(--sv-font-medium);
        color: var(--sv-text-secondary);
        margin-bottom: var(--sv-space-2);
        text-transform: uppercase;
      }
    }
    
    // Main color area (hue/saturation)
    &-color-area {
      position: relative;
      width: 100%;
      height: var(--sv-size-40);
      margin-bottom: var(--sv-space-3);
      border-radius: var(--sv-radius-md);
      cursor: crosshair;
      
      // Saturation gradient overlay
      &-saturation {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to right, #fff, rgba(255, 255, 255, 0));
        border-radius: inherit;
      }
      
      // Brightness gradient overlay
      &-brightness {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to bottom, rgba(0, 0, 0, 0), #000);
        border-radius: inherit;
      }
      
      // Color picker handle
      &-handle {
        position: absolute;
        width: var(--sv-size-4);
        height: var(--sv-size-4);
        border-radius: 50%;
        border: 2px solid white;
        box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.3);
        transform: translate(-50%, -50%);
        pointer-events: none;
      }
    }
    
    // Input type switcher (HEX/RGB/HSL)
    &-format-switch {
      display: flex;
      margin-bottom: var(--sv-space-2);
      border: 1px solid var(--sv-border-medium);
      border-radius: var(--sv-radius-md);
      overflow: hidden;
      
      &-btn {
        flex: 1;
        padding: var(--sv-space-1) 0;
        border: none;
        background-color: var(--sv-bg-element);
        cursor: pointer;
        font-size: var(--sv-text-xs);
        color: var(--sv-text-secondary);
        
        &:hover {
          @include hover-state;
        }
        
        &:focus {
          @include focus-state;
        }
        
        &.active {
          @include selected-state;
        }
      }
    }
    
    // Color value inputs
    &-inputs {
      display: flex;
      gap: var(--sv-space-2);
      margin-bottom: var(--sv-space-3);
      
      &-group {
        display: flex;
        flex-direction: column;
        flex: 1;
        
        &-label {
          font-size: var(--sv-text-xs);
          color: var(--sv-text-secondary);
          margin-bottom: var(--sv-space-1);
          text-transform: uppercase;
        }
        
        &-input {
          padding: var(--sv-space-1) var(--sv-space-2);
          border: 1px solid var(--sv-border-medium);
          border-radius: var(--sv-radius-sm);
          font-size: var(--sv-text-sm);
          color: var(--sv-text-primary);
          background-color: var(--sv-bg-element);
          
          &:focus {
            @include focus-state;
          }
          
          &:hover {
            @include hover-state;
          }
          
          &:disabled {
            @include disabled-state;
          }
        }
      }
      
      // Hex input is wider
      &-hex {
        flex: 2;
      }
    }
    
    // Footer with action buttons
    &-footer {
      display: flex;
      justify-content: space-between;
      
      &-btn {
        padding: var(--sv-space-1) var(--sv-space-3);
        border: none;
        border-radius: var(--sv-radius-sm);
        font-size: var(--sv-text-sm);
        cursor: pointer;
        
        &:focus {
          @include focus-state;
        }
        
        &-clear {
          background-color: transparent;
          color: var(--sv-text-secondary);
          
          &:hover {
            @include hover-state;
            color: var(--sv-text-primary);
          }
          
          &:active {
            @include active-state;
          }
        }
        
        &-apply {
          background-color: var(--sv-primary);
          color: var(--sv-text-on-dark);
          
          &:hover {
            background-color: var(--sv-primary-dark);
          }
          
          &:active {
            background-color: var(--sv-primary-darker);
          }
          
          &:disabled {
            @include disabled-state;
          }
        }
      }
    }
  }
  
  // Color palettes
  .sv-color-palette {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    gap: var(--sv-space-1);
    margin-bottom: var(--sv-space-3);
    
    &-swatch {
      width: var(--sv-size-6);
      height: var(--sv-size-6);
      border-radius: var(--sv-radius-sm);
      cursor: pointer;
      box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);
      
      &:hover {
        transform: scale(1.1);
        box-shadow: 0 0 0 1px var(--sv-border-dark);
      }
      
      &.selected {
        box-shadow: 0 0 0 2px var(--sv-primary);
      }
      
      // Transparent swatch
      &-transparent {
        background-image: linear-gradient(45deg, #ccc 25%, transparent 25%),
                          linear-gradient(-45deg, #ccc 25%, transparent 25%),
                          linear-gradient(45deg, transparent 75%, #ccc 75%),
                          linear-gradient(-45deg, transparent 75%, #ccc 75%);
        background-size: 6px 6px;
        background-position: 0 0, 0 3px, 3px -3px, -3px 0;
      }
    }
    
    // Recent colors section
    &-recent {
      display: flex;
      gap: var(--sv-space-1);
      flex-wrap: wrap;
      
      .sv-color-palette-swatch {
        width: calc(var(--sv-size-6) * 1.2);
        height: calc(var(--sv-size-6) * 1.2);
      }
    }
  }
  
  // Color sliders
  .sv-color-slider {
    position: relative;
    width: 100%;
    height: var(--sv-size-4);
    margin-bottom: var(--sv-space-3);
    border-radius: calc(var(--sv-size-4) / 2);
    cursor: pointer;
    
    // Hue slider
    &-hue {
      background: linear-gradient(
        to right,
        #f00, #ff0, #0f0, #0ff, #00f, #f0f, #f00
      );
    }
    
    // Alpha slider with checkered background
    &-alpha {
      background-image: linear-gradient(45deg, #ccc 25%, transparent 25%),
                        linear-gradient(-45deg, #ccc 25%, transparent 25%),
                        linear-gradient(45deg, transparent 75%, #ccc 75%),
                        linear-gradient(-45deg, transparent 75%, #ccc 75%);
      background-size: 8px 8px;
      background-position: 0 0, 0 4px, 4px -4px, -4px 0;
      
      &-gradient {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border-radius: inherit;
      }
    }
    
    // Slider handle
    &-handle {
      position: absolute;
      width: var(--sv-size-4);
      height: var(--sv-size-6);
      border-radius: var(--sv-radius-sm);
      background-color: white;
      border: 1px solid rgba(0, 0, 0, 0.3);
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
      top: 50%;
      transform: translate(-50%, -50%);
      pointer-events: none;
    }
  }
  
  // Responsive adjustments
  @include responsive.breakpoint-down(md) {
    .sv-color-panel {
      width: 100%;
    }
  }
  
  @include responsive.breakpoint-down(sm) {
    .sv-color-panel {
      position: fixed;
      top: auto;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;
      height: 80vh;
      border-radius: var(--sv-radius-md) var(--sv-radius-md) 0 0;
      z-index: var(--sv-z-index-modal);
    }
  }
  
  // RTL support
  [dir="rtl"] & {
    .sv-color-field-preview {
      margin-right: 0;
      margin-left: var(--sv-space-2);
    }
    
    .sv-color-picker-toggle {
      margin-left: 0;
      margin-right: var(--sv-space-2);
    }
    
    .sv-color-panel {
      left: auto;
      right: 0;
    }
  }
