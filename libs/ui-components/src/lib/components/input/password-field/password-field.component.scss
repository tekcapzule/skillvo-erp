@use './../../../../../../../styles/abstracts/' as *;
@use './../../../../../../../styles/base/' as *;

// Component-specific variables
$password-toggle-size: var(--sv-icon-size-md);
$password-strength-height: 4px;

.sv-password-field {
  // Extend the input base styles (this is handled in the template with ngClass)
  
  // Use monospace font for password fields for consistent character width
  font-family: var(--sv-font-family-mono);
  letter-spacing: 0.125em;
  
  // Add right padding to make room for the toggle button
  padding-right: calc(var(--sv-padding-6) + $password-toggle-size);

  // Container for password input and toggle button
  &-container {
    position: relative;
    display: flex;
    align-items: center;
    width: 100%;
  }
}

// Password Visibility Toggle
.sv-password-toggle {
  position: absolute;
  right: var(--sv-padding-2);
  top: 50%;
  transform: translateY(-50%);
  display: flex;
  align-items: center;
  justify-content: center;
  width: $password-toggle-size;
  height: $password-toggle-size;
  background: transparent;
  border: none;
  cursor: pointer;
  color: var(--sv-text-secondary);
  
  &:hover {
    color: var(--sv-text-primary);
  }
  
  &:focus {
    outline: none;
    color: var(--sv-primary);
  }
  
  // Icon styles for visibility states
  &-icon {
    width: var(--sv-icon-size-sm);
    height: var(--sv-icon-size-sm);
    
    // Transitions for icon switching
    @include transition(opacity, 'short', 'standard');
    
    &-show,
    &-hide {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    
    &-show {
      opacity: 1;
    }
    
    &-hide {
      opacity: 0;
    }
  }
  
  // When password is visible, swap the icon states
  &.visible {
    .sv-password-toggle-icon {
      &-show {
        opacity: 0;
      }
      
      &-hide {
        opacity: 1;
      }
    }
  }
}

// Password Strength Indicator
.sv-password-strength {
  margin-top: var(--sv-space-2);
  
  &-meter {
    height: $password-strength-height;
    width: 100%;
    background-color: var(--sv-bg-element);
    border-radius: calc($password-strength-height / 2);
    overflow: hidden;
  }
  
  &-bar {
    height: 100%;
    width: 0;
    border-radius: calc($password-strength-height / 2);
    @include transition(width, 'medium', 'standard');
    
    // Strength levels
    &-weak {
      width: 25%;
      background-color: var(--sv-error);
    }
    
    &-fair {
      width: 50%;
      background-color: var(--sv-warning);
    }
    
    &-good {
      width: 75%;
      background-color: var(--sv-info);
    }
    
    &-strong {
      width: 100%;
      background-color: var(--sv-success);
    }
  }
  
  &-text {
    margin-top: var(--sv-space-1);
    font-size: var(--sv-text-xs);
    color: var(--sv-text-secondary);
    
    &-weak {
      color: var(--sv-error);
    }
    
    &-fair {
      color: var(--sv-warning);
    }
    
    &-good {
      color: var(--sv-info);
    }
    
    &-strong {
      color: var(--sv-success);
    }
  }
}

// Responsive Adjustments
@include breakpoint-down(sm) {
  .sv-password-field {
    padding-right: calc(var(--sv-padding-4) + $password-toggle-size);
    
    &-container {
      // Adjust spacing for smaller screens
      gap: var(--sv-space-1);
    }
  }
  
  .sv-password-toggle {
    right: var(--sv-padding-1);
  }
  
  .sv-password-strength {
    &-text {
      font-size: var(--sv-text-xs);
    }
  }
}

// RTL support
[dir="rtl"] {
  .sv-password-field {
    padding-right: $input-padding-x;
    padding-left: calc(var(--sv-padding-6) + $password-toggle-size);
  }
  
  .sv-password-toggle {
    right: auto;
    left: var(--sv-padding-2);
  }
  
  @include breakpoint-down(sm) {
    .sv-password-field {
      padding-right: $input-padding-x;
      padding-left: calc(var(--sv-padding-4) + $password-toggle-size);
    }
    
    .sv-password-toggle {
      right: auto;
      left: var(--sv-padding-1);
    }
  }
}